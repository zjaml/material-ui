{
  "AppBar": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'fixed'",
              "computed": false
            },
            {
              "value": "'absolute'",
              "computed": false
            },
            {
              "value": "'sticky'",
              "computed": false
            },
            {
              "value": "'static'",
              "computed": false
            },
            {
              "value": "'relative'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The positioning type. The behavior of the different options is described\n[in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).\nNote: `sticky` is not universally supported and will fall back to `static` when unavailable.",
        "defaultValue": {
          "value": "'fixed'",
          "computed": false
        }
      }
    },
    "name": "AppBar",
    "styles": {
      "classes": [
        "root",
        "positionFixed",
        "positionAbsolute",
        "positionSticky",
        "positionStatic",
        "positionRelative",
        "colorDefault",
        "colorPrimary",
        "colorSecondary"
      ],
      "name": "MuiAppBar",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "positionFixed": "Styles applied to the root element if `position=\"fixed\"`.",
        "positionAbsolute": "Styles applied to the root element if `position=\"absolute\"`.",
        "positionSticky": "Styles applied to the root element if `position=\"sticky\"`.",
        "positionStatic": "Styles applied to the root element if `position=\"static\"`.",
        "positionRelative": "Styles applied to the root element if `position=\"relative\"`.",
        "colorDefault": "Styles applied to the root element if `color=\"default\"`.",
        "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
        "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/AppBar/AppBar.js",
    "inheritance": {
      "component": "Paper",
      "pathname": "/api/paper"
    }
  },
  "Avatar": {
    "description": "",
    "methods": [],
    "props": {
      "alt": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Used in combination with `src` or `srcSet` to\nprovide an alt attribute for the rendered `img` element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Used to render icon or text elements inside the Avatar.\n`src` and `alt` props will not be used and no `img` will\nbe rendered by default.\n\nThis can be an element, or just a string."
      },
      "childrenClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore\nThe className of the child element.\nUsed by Chip and ListItemIcon to style the Avatar icon."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "imgProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the `img` element if the component\nis used to display an image."
      },
      "sizes": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `sizes` attribute for the `img` element."
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `src` attribute for the `img` element."
      },
      "srcSet": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `srcSet` attribute for the `img` element."
      }
    },
    "name": "Avatar",
    "styles": {
      "classes": [
        "root",
        "colorDefault",
        "img"
      ],
      "name": "MuiAvatar",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "colorDefault": "Styles applied to the root element if there are children and not `src` or `srcSet`.",
        "img": "Styles applied to the img element if either `src` or `srcSet` is defined."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Avatar/Avatar.js",
    "inheritance": null
  },
  "Backdrop": {
    "description": "",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "invisible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the backdrop is invisible.\nIt can be used when rendering a popover or a custom select component.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the backdrop is open."
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object."
      }
    },
    "name": "Backdrop",
    "styles": {
      "classes": [
        "root",
        "invisible"
      ],
      "name": "MuiBackdrop",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "invisible": "Styles applied to the root element if `invisible={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Backdrop/Backdrop.js",
    "inheritance": null
  },
  "Badge": {
    "description": "",
    "methods": [],
    "props": {
      "badgeContent": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content rendered within the badge."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The badge will be added relative to this node."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'span'",
          "computed": false
        }
      },
      "invisible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the badge will be invisible."
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Max count to show.",
        "defaultValue": {
          "value": "99",
          "computed": false
        }
      },
      "showZero": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls whether the badge is hidden when `badgeContent` is zero.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'dot'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'standard'",
          "computed": false
        }
      }
    },
    "name": "Badge",
    "styles": {
      "classes": [
        "root",
        "badge",
        "colorPrimary",
        "colorSecondary",
        "colorError",
        "invisible",
        "dot"
      ],
      "name": "MuiBadge",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "badge": "Styles applied to the badge `span` element.",
        "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
        "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
        "colorError": "Styles applied to the root element if `color=\"error\"`.",
        "invisible": "Styles applied to the badge `span` element if `invisible={true}`.",
        "dot": "Styles applied to the root element if `variant=\"dot\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Badge/Badge.js",
    "inheritance": null
  },
  "BottomNavigation": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value changes.\n\n@param {object} event The event source of the callback\n@param {any} value We default to the index of the child"
      },
      "showLabels": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, all `BottomNavigationAction`s will show their labels.\nBy default, only the selected `BottomNavigationAction` will show its label.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the currently selected `BottomNavigationAction`."
      }
    },
    "name": "BottomNavigation",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiBottomNavigation",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/BottomNavigation/BottomNavigation.js",
    "inheritance": null
  },
  "BottomNavigationAction": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "custom",
          "raw": "unsupportedProp"
        },
        "required": false,
        "description": "This prop isn't supported.\nUse the `component` prop if you need to change the children structure."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon element."
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The label element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "showLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `BottomNavigationAction` will show its label.\nBy default, only the selected `BottomNavigationAction`\ninside `BottomNavigation` will show its label."
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "You can provide your own value. Otherwise, we fallback to the child position index."
      }
    },
    "name": "BottomNavigationAction",
    "styles": {
      "classes": [
        "root",
        "selected",
        "iconOnly",
        "wrapper",
        "label"
      ],
      "name": "MuiBottomNavigationAction",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "selected": "Pseudo-class applied to the root element if selected.",
        "iconOnly": "Pseudo-class applied to the root element if `showLabel={false}` and not selected.",
        "wrapper": "Styles applied to the span element that wraps the icon and label.",
        "label": "Styles applied to the label's span element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/BottomNavigationAction/BottomNavigationAction.js",
    "inheritance": {
      "component": "ButtonBase",
      "pathname": "/api/button-base"
    }
  },
  "Breadcrumbs": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The breadcrumb children."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.\nBy default, it maps the variant to a good default headline component.",
        "defaultValue": {
          "value": "'nav'",
          "computed": false
        }
      },
      "itemsAfterCollapse": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If max items is exceeded, the number of items to show after the ellipsis.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "itemsBeforeCollapse": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If max items is exceeded, the number of items to show before the ellipsis.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "maxItems": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Specifies the maximum number of breadcrumbs to display. When there are more\nthan the maximum number, only the first and last will be shown, with an\nellipsis in between.",
        "defaultValue": {
          "value": "8",
          "computed": false
        }
      },
      "separator": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Custom separator node.",
        "defaultValue": {
          "value": "'/'",
          "computed": false
        }
      }
    },
    "name": "Breadcrumbs",
    "styles": {
      "classes": [
        "root",
        "ol",
        "li",
        "separator"
      ],
      "name": "MuiBreadcrumbs",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "ol": "Styles applied to the ol element.",
        "li": "Styles applied to the li element.",
        "separator": "Styles applied to the separator element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Breadcrumbs/Breadcrumbs.js",
    "inheritance": null
  },
  "TouchRipple": {
    "description": "",
    "methods": [],
    "props": {
      "center": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple starts at the center of the component\nrather than at the point of interaction.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "TouchRipple",
    "styles": {
      "classes": [
        "root",
        "ripple",
        "rippleVisible",
        "ripplePulsate",
        "child",
        "childLeaving",
        "childPulsate"
      ],
      "name": "MuiTouchRipple",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "ripple": "Styles applied to the internal `Ripple` components `ripple` class.",
        "rippleVisible": "Styles applied to the internal `Ripple` components `rippleVisible` class.",
        "ripplePulsate": "Styles applied to the internal `Ripple` components `ripplePulsate` class.",
        "child": "Styles applied to the internal `Ripple` components `child` class.",
        "childLeaving": "Styles applied to the internal `Ripple` components `childLeaving` class.",
        "childPulsate": "Styles applied to the internal `Ripple` components `childPulsate` class."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ButtonBase/TouchRipple.js",
    "inheritance": null
  },
  "ButtonGroup": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the button group."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the buttons will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableFocusRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the button keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the button ripple effect will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the buttons will take up the full width of its container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'contained'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'outlined'",
          "computed": false
        }
      }
    },
    "name": "ButtonGroup",
    "styles": {
      "classes": [
        "root",
        "contained",
        "fullWidth",
        "grouped",
        "groupedOutlined",
        "groupedOutlinedPrimary",
        "groupedOutlinedSecondary",
        "groupedContained",
        "groupedContainedPrimary",
        "groupedContainedSecondary"
      ],
      "name": "MuiButtonGroup",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "contained": "Styles applied to the root element if variant=\"contained\".",
        "fullWidth": "Styles applied to the root element if fullWidth={true}.",
        "grouped": "Styles applied to the children.",
        "groupedOutlined": "Styles applied to the children if variant=\"outlined\".",
        "groupedOutlinedPrimary": "Styles applied to the children if variant=\"outlined\" & color=\"primary\".",
        "groupedOutlinedSecondary": "Styles applied to the children if variant=\"outlined\" & color=\"secondary\".",
        "groupedContained": "Styles applied to the children if variant=\"contained\".",
        "groupedContainedPrimary": "Styles applied to the children if variant=\"contained\" & color=\"primary\".",
        "groupedContainedSecondary": "Styles applied to the children if variant=\"contained\" & color=\"secondary\"."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ButtonGroup/ButtonGroup.js",
    "inheritance": null
  },
  "Card": {
    "description": "",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "raised": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the card will use raised styling.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "Card",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiCard",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Card/Card.js",
    "inheritance": {
      "component": "Paper",
      "pathname": "/api/paper"
    }
  },
  "CardActionArea": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "focusVisibleClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "CardActionArea",
    "styles": {
      "classes": [
        "root",
        "focusVisible",
        "focusHighlight"
      ],
      "name": "MuiCardActionArea",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "focusVisible": "Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused.",
        "focusHighlight": "Styles applied to the overlay that covers the action area when it is keyboard focused."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/CardActionArea/CardActionArea.js",
    "inheritance": {
      "component": "ButtonBase",
      "pathname": "/api/button-base"
    }
  },
  "CardActions": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableSpacing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the actions do not have additional margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "CardActions",
    "styles": {
      "classes": [
        "root",
        "spacing"
      ],
      "name": "MuiCardActions",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "spacing": "Styles applied to the root element if `disableSpacing={false}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/CardActions/CardActions.js",
    "inheritance": null
  },
  "CardContent": {
    "description": "",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    },
    "name": "CardContent",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiCardContent",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/CardContent/CardContent.js",
    "inheritance": null
  },
  "CardHeader": {
    "description": "",
    "methods": [],
    "props": {
      "action": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The action to display in the card header."
      },
      "avatar": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The Avatar for the Card Header."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "disableTypography": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the children won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `title` text, and optional `subheader` text\nwith the Typography component.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "subheader": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "subheaderTypographyProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "These props will be forwarded to the subheader\n(as long as disableTypography is not `true`)."
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the Card Title."
      },
      "titleTypographyProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "These props will be forwarded to the title\n(as long as disableTypography is not `true`)."
      }
    },
    "name": "CardHeader",
    "styles": {
      "classes": [
        "root",
        "avatar",
        "action",
        "content",
        "title",
        "subheader"
      ],
      "name": "MuiCardHeader",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "avatar": "Styles applied to the avatar element.",
        "action": "Styles applied to the action element.",
        "content": "Styles applied to the content wrapper element.",
        "title": "Styles applied to the title Typography element.",
        "subheader": "Styles applied to the subheader Typography element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/CardHeader/CardHeader.js",
    "inheritance": null
  },
  "CardMedia": {
    "description": "",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "Component for rendering image.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "image": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Image to be displayed as a background image.\nEither `image` or `src` prop must be specified.\nNote that caller must specify height otherwise the image will not be visible."
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "An alias for `image` property.\nAvailable only with media components.\nMedia components: `video`, `audio`, `picture`, `iframe`, `img`."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "CardMedia",
    "styles": {
      "classes": [
        "root",
        "media"
      ],
      "name": "MuiCardMedia",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "media": "Styles applied to the root element if `component=\"video, audio, picture, iframe, or img\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/CardMedia/CardMedia.js",
    "inheritance": null
  },
  "Checkbox": {
    "description": "",
    "methods": [],
    "props": {
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component is checked."
      },
      "checkedIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is checked.",
        "defaultValue": {
          "value": "<CheckBoxIcon />",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'secondary'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the switch will be disabled."
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled."
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is unchecked.",
        "defaultValue": {
          "value": "<CheckBoxOutlineBlankIcon />",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "indeterminate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component appears indeterminate.\nThis does not set the native input element to indeterminate due\nto inconsistent behavior across browsers.\nHowever, we set a `data-indeterminate` attribute on the input.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "indeterminateIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is indeterminate.",
        "defaultValue": {
          "value": "<IndeterminateCheckBoxIcon />",
          "computed": false
        }
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "This prop can be used to pass a ref callback to the `input` element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the state is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.checked`.\n@param {boolean} checked The `checked` value of the switch"
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The input component prop `type`."
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the component. The DOM API casts this to a string."
      }
    },
    "name": "Checkbox",
    "styles": {
      "classes": [
        "root",
        "checked",
        "disabled",
        "indeterminate",
        "colorPrimary",
        "colorSecondary"
      ],
      "name": "MuiCheckbox",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "checked": "Pseudo-class applied to the root element if `checked={true}`.",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
        "indeterminate": "Pseudo-class applied to the root element if `indeterminate={true}`.",
        "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
        "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Checkbox/Checkbox.js",
    "inheritance": {
      "component": "IconButton",
      "pathname": "/api/icon-button"
    }
  },
  "CircularProgress": {
    "description": "## ARIA\n\nIf the progress bar is describing the loading progress of a particular region of a page,\nyou should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\nattribute to `true` on that region until it has finished loading.",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "disableShrink": {
        "type": {
          "name": "custom",
          "raw": "chainPropTypes(PropTypes.bool, props => {\n  if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {\n    return new Error(\n      'Material-UI: you have provided the `disableShrink` prop ' +\n        'with a variant other than `indeterminate`. This will have no effect.',\n    );\n  }\n\n  return null;\n})"
        },
        "required": false,
        "description": "If `true`, the shrink animation is disabled.\nThis only works if variant is `indeterminate`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The size of the circle.",
        "defaultValue": {
          "value": "40",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "thickness": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The thickness of the circle.",
        "defaultValue": {
          "value": "3.6",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The value of the progress indicator for the determinate and static variants.\nValue between 0 and 100.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'determinate'",
              "computed": false
            },
            {
              "value": "'indeterminate'",
              "computed": false
            },
            {
              "value": "'static'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.\nUse indeterminate when there is no progress value.",
        "defaultValue": {
          "value": "'indeterminate'",
          "computed": false
        }
      }
    },
    "name": "CircularProgress",
    "styles": {
      "classes": [
        "root",
        "static",
        "indeterminate",
        "colorPrimary",
        "colorSecondary",
        "svg",
        "circle",
        "circleStatic",
        "circleIndeterminate",
        "circleDisableShrink"
      ],
      "name": "MuiCircularProgress",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "static": "Styles applied to the root element if `variant=\"static\"`.",
        "indeterminate": "Styles applied to the root element if `variant=\"indeterminate\"`.",
        "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
        "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
        "svg": "Styles applied to the `svg` element.",
        "circle": "Styles applied to the `circle` svg path.",
        "circleStatic": "Styles applied to the `circle` svg path if `variant=\"static\"`.",
        "circleIndeterminate": "Styles applied to the `circle` svg path if `variant=\"indeterminate\"`.",
        "circleDisableShrink": "Styles applied to the `circle` svg path if `disableShrink={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/CircularProgress/CircularProgress.js",
    "inheritance": null
  },
  "ClickAwayListener": {
    "description": "Listen for click events that occur somewhere in the document, outside of the element itself.\nFor instance, if you need to hide a menu when people click anywhere else on your page.",
    "displayName": "ClickAwayListener",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "custom",
          "raw": "elementAcceptingRef.isRequired"
        },
        "required": false,
        "description": "The wrapped element."
      },
      "mouseEvent": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'onClick'",
              "computed": false
            },
            {
              "value": "'onMouseDown'",
              "computed": false
            },
            {
              "value": "'onMouseUp'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The mouse event to listen to. You can disable the listener by providing `false`.",
        "defaultValue": {
          "value": "'onClick'",
          "computed": false
        }
      },
      "onClickAway": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Callback fired when a \"click away\" event is detected."
      },
      "touchEvent": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'onTouchStart'",
              "computed": false
            },
            {
              "value": "'onTouchEnd'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The touch event to listen to. You can disable the listener by providing `false`.",
        "defaultValue": {
          "value": "'onTouchEnd'",
          "computed": false
        }
      }
    },
    "name": "ClickAwayListener",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": false,
    "filename": "/packages/material-ui/src/ClickAwayListener/ClickAwayListener.js",
    "inheritance": null
  },
  "Container": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": ""
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "fixed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set the max-width to match the min-width of the current breakpoint.\nThis is useful if you'd prefer to design for a fixed set of sizes\ninstead of trying to accommodate a fully fluid viewport.\nIt's fluid by default.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "maxWidth": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'xs'",
              "computed": false
            },
            {
              "value": "'sm'",
              "computed": false
            },
            {
              "value": "'md'",
              "computed": false
            },
            {
              "value": "'lg'",
              "computed": false
            },
            {
              "value": "'xl'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determine the max-width of the container.\nThe container width grows with the size of the screen.\nSet to `false` to disable `maxWidth`.",
        "defaultValue": {
          "value": "'lg'",
          "computed": false
        }
      }
    },
    "name": "Container",
    "styles": {
      "classes": [
        "root",
        "fixed",
        "maxWidthXs",
        "maxWidthSm",
        "maxWidthMd",
        "maxWidthLg",
        "maxWidthXl"
      ],
      "name": "MuiContainer",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "fixed": "Styles applied to the root element if `fixed={true}`.",
        "maxWidthXs": "Styles applied to the root element if `maxWidth=\"xs\"`.",
        "maxWidthSm": "Styles applied to the root element if `maxWidth=\"sm\"`.",
        "maxWidthMd": "Styles applied to the root element if `maxWidth=\"md\"`.",
        "maxWidthLg": "Styles applied to the root element if `maxWidth=\"lg\"`.",
        "maxWidthXl": "Styles applied to the root element if `maxWidth=\"xl\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Container/Container.js",
    "inheritance": null
  },
  "CssBaseline": {
    "description": "Kickstart an elegant, consistent, and simple baseline to build upon.",
    "displayName": "CssBaseline",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "You can wrap a node.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      }
    },
    "name": "CssBaseline",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": false,
    "filename": "/packages/material-ui/src/CssBaseline/CssBaseline.js",
    "inheritance": null
  },
  "Dialog": {
    "description": "Dialogs are overlaid modal paper based components with a backdrop.",
    "methods": [],
    "props": {
      "BackdropProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Dialog children, usually the included sub-components."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableBackdropClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, clicking the backdrop will not fire the `onClose` callback.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableEscapeKeyDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, hitting escape will not fire the `onClose` callback.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fullScreen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the dialog will be full-screen",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the dialog stretches to `maxWidth`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "maxWidth": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'xs'",
              "computed": false
            },
            {
              "value": "'sm'",
              "computed": false
            },
            {
              "value": "'md'",
              "computed": false
            },
            {
              "value": "'lg'",
              "computed": false
            },
            {
              "value": "'xl'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determine the max-width of the dialog.\nThe dialog width grows with the size of the screen.\nSet to `false` to disable `maxWidth`.",
        "defaultValue": {
          "value": "'sm'",
          "computed": false
        }
      },
      "onBackdropClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the backdrop is clicked."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback\n@param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`"
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the dialog enters."
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the dialog has entered."
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the dialog is entering."
      },
      "onEscapeKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the escape key is pressed,\n`disableKeyboard` is false and the modal is in focus."
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the dialog exits."
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the dialog has exited."
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the dialog is exiting."
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the Dialog is open."
      },
      "PaperComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used to render the body of the dialog.",
        "defaultValue": {
          "value": "Paper",
          "computed": true
        }
      },
      "PaperProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Paper`](/api/paper/) element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "scroll": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'body'",
              "computed": false
            },
            {
              "value": "'paper'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determine the container for scrolling the dialog.",
        "defaultValue": {
          "value": "'paper'",
          "computed": false
        }
      },
      "TransitionComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the transition.",
        "defaultValue": {
          "value": "Fade",
          "computed": true
        }
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }",
          "computed": false
        }
      },
      "TransitionProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `Transition` element."
      }
    },
    "name": "Dialog",
    "styles": {
      "classes": [
        "root",
        "scrollPaper",
        "scrollBody",
        "container",
        "paper",
        "paperScrollPaper",
        "paperScrollBody",
        "paperWidthFalse",
        "paperWidthXs",
        "paperWidthSm",
        "paperWidthMd",
        "paperWidthLg",
        "paperWidthXl",
        "paperFullWidth",
        "paperFullScreen"
      ],
      "name": "MuiDialog",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "scrollPaper": "Styles applied to the container element if `scroll=\"paper\"`.",
        "scrollBody": "Styles applied to the container element if `scroll=\"body\"`.",
        "container": "Styles applied to the container element.",
        "paper": "Styles applied to the `Paper` component.",
        "paperScrollPaper": "Styles applied to the `Paper` component if `scroll=\"paper\"`.",
        "paperScrollBody": "Styles applied to the `Paper` component if `scroll=\"body\"`.",
        "paperWidthFalse": "Styles applied to the `Paper` component if `maxWidth=false`.",
        "paperWidthXs": "Styles applied to the `Paper` component if `maxWidth=\"xs\"`.",
        "paperWidthSm": "Styles applied to the `Paper` component if `maxWidth=\"sm\"`.",
        "paperWidthMd": "Styles applied to the `Paper` component if `maxWidth=\"md\"`.",
        "paperWidthLg": "Styles applied to the `Paper` component if `maxWidth=\"lg\"`.",
        "paperWidthXl": "Styles applied to the `Paper` component if `maxWidth=\"xl\"`.",
        "paperFullWidth": "Styles applied to the `Paper` component if `fullWidth={true}`.",
        "paperFullScreen": "Styles applied to the `Paper` component if `fullScreen={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Dialog/Dialog.js",
    "inheritance": {
      "component": "Modal",
      "pathname": "/api/modal"
    }
  },
  "DialogActions": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableSpacing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the actions do not have additional margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "DialogActions",
    "styles": {
      "classes": [
        "root",
        "spacing"
      ],
      "name": "MuiDialogActions",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "spacing": "Styles applied to the root element if `disableSpacing={false}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/DialogActions/DialogActions.js",
    "inheritance": null
  },
  "DialogContent": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "dividers": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the top and bottom dividers.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "DialogContent",
    "styles": {
      "classes": [
        "root",
        "dividers"
      ],
      "name": "MuiDialogContent",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "dividers": "Styles applied to the root element if `dividers={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/DialogContent/DialogContent.js",
    "inheritance": null
  },
  "DialogContentText": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      }
    },
    "name": "DialogContentText",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiDialogContentText",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/DialogContentText/DialogContentText.js",
    "inheritance": {
      "component": "Typography",
      "pathname": "/api/typography"
    }
  },
  "DialogTitle": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableTypography": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the children won't be wrapped by a typography component.\nFor instance, this can be useful to render an h4 instead of the default h2.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "DialogTitle",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiDialogTitle",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/DialogTitle/DialogTitle.js",
    "inheritance": null
  },
  "Divider": {
    "description": "",
    "methods": [],
    "props": {
      "absolute": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Absolutely position the element.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'hr'",
          "computed": false
        }
      },
      "light": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the divider will have a lighter color.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "Component !== 'hr' ? 'separator' : undefined",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'fullWidth'",
              "computed": false
            },
            {
              "value": "'inset'",
              "computed": false
            },
            {
              "value": "'middle'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'fullWidth'",
          "computed": false
        }
      }
    },
    "name": "Divider",
    "styles": {
      "classes": [
        "root",
        "absolute",
        "inset",
        "light",
        "middle"
      ],
      "name": "MuiDivider",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "absolute": "Styles applied to the root element if `absolute={true}`.",
        "inset": "Styles applied to the root element if `variant=\"inset\"`.",
        "light": "Styles applied to the root element if `light={true}`.",
        "middle": "Styles applied to the root element if `variant=\"middle\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Divider/Divider.js",
    "inheritance": null
  },
  "ExpansionPanel": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "custom",
          "raw": "chainPropTypes(PropTypes.node.isRequired, props => {\n  const summary = React.Children.toArray(props.children)[0];\n  if (summary.type === React.Fragment) {\n    return new Error(\n      \"Material-UI: the ExpansionPanel doesn't accept a Fragment as a child. \" +\n        'Consider providing an array instead.',\n    );\n  }\n\n  if (!React.isValidElement(summary)) {\n    return new Error(\n      'Material-UI: expected the first child of ExpansionPanel to be a valid element.',\n    );\n  }\n\n  return null;\n})"
        },
        "required": false,
        "description": "The content of the expansion panel."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "defaultExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, expands the panel by default.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the panel will be displayed in a disabled state.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "expanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, expands the panel, otherwise collapse it.\nSetting this prop enables control over the panel."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the expand/collapse state is changed.\n\n@param {object} event The event source of the callback\n@param {boolean} expanded The `expanded` state of the panel"
      },
      "square": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "TransitionComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the collapse effect.",
        "defaultValue": {
          "value": "Collapse",
          "computed": true
        }
      },
      "TransitionProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `Transition` element."
      }
    },
    "name": "ExpansionPanel",
    "styles": {
      "classes": [
        "root",
        "rounded",
        "expanded",
        "disabled"
      ],
      "name": "MuiExpansionPanel",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "rounded": "Styles applied to the root element if `square={false}`.",
        "expanded": "Styles applied to the root element if `expanded={true}`.",
        "disabled": "Styles applied to the root element if `disabled={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ExpansionPanel/ExpansionPanel.js",
    "inheritance": {
      "component": "Paper",
      "pathname": "/api/paper"
    }
  },
  "ExpansionPanelActions": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableSpacing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the actions do not have additional margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "ExpansionPanelActions",
    "styles": {
      "classes": [
        "root",
        "spacing"
      ],
      "name": "MuiExpansionPanelActions",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "spacing": "Styles applied to the root element if `disableSpacing={false}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ExpansionPanelActions/ExpansionPanelActions.js",
    "inheritance": null
  },
  "ExpansionPanelDetails": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the expansion panel details."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "ExpansionPanelDetails",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiExpansionPanelDetails",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ExpansionPanelDetails/ExpansionPanelDetails.js",
    "inheritance": null
  },
  "ExpansionPanelSummary": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the expansion panel summary."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nIf `true`, the summary will be displayed in a disabled state.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "expanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nIf `true`, expands the summary, otherwise collapse it."
      },
      "expandIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display as the expand indicator."
      },
      "IconButtonProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `IconButton` element wrapping the expand icon."
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onFocusVisible": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "ExpansionPanelSummary",
    "styles": {
      "classes": [
        "root",
        "expanded",
        "focused",
        "disabled",
        "content",
        "expandIcon"
      ],
      "name": "MuiExpansionPanelSummary",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "expanded": "Styles applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`.",
        "focused": "Styles applied to the root and children wrapper elements when focused.",
        "disabled": "Styles applied to the root element if `disabled={true}`.",
        "content": "Styles applied to the children wrapper element.",
        "expandIcon": "Styles applied to the `IconButton` component when `expandIcon` is supplied."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ExpansionPanelSummary/ExpansionPanelSummary.js",
    "inheritance": {
      "component": "ButtonBase",
      "pathname": "/api/button-base"
    }
  },
  "Fab": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the button."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the button will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableFocusRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled."
      },
      "focusVisibleClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node."
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
        "defaultValue": {
          "value": "'large'",
          "computed": false
        }
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'round'",
              "computed": false
            },
            {
              "value": "'extended'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'round'",
          "computed": false
        }
      }
    },
    "name": "Fab",
    "styles": {
      "classes": [
        "root",
        "label",
        "primary",
        "secondary",
        "extended",
        "focusVisible",
        "disabled",
        "colorInherit",
        "sizeSmall",
        "sizeMedium"
      ],
      "name": "MuiFab",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "label": "Styles applied to the span element that wraps the children.",
        "primary": "Styles applied to the root element if `color=\"primary\"`.",
        "secondary": "Styles applied to the root element if `color=\"secondary\"`.",
        "extended": "Styles applied to the root element if `variant=\"extended\"`.",
        "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
        "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
        "sizeSmall": "Styles applied to the root element if `size=\"small\"``.",
        "sizeMedium": "Styles applied to the root element if `size=\"medium\"``."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Fab/Fab.js",
    "inheritance": {
      "component": "ButtonBase",
      "pathname": "/api/button-base"
    }
  },
  "Fade": {
    "description": "The Fade transition is used by the [Modal](/components/modal/) component.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "A single child content element."
      },
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will transition in."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "timeout": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
          "computed": false
        }
      }
    },
    "name": "Fade",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Fade/Fade.js",
    "inheritance": {
      "component": "Transition",
      "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
    }
  },
  "FilledInput": {
    "description": "",
    "methods": [],
    "props": {
      "autoComplete": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill)."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be focused during the first mount."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the wrapper element."
      },
      "defaultValue": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The default `input` element value. Use when the component is not controlled."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be disabled."
      },
      "disableUnderline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will not have an underline."
      },
      "endAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "End `InputAdornment` for this component."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will take up the full width of its container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the native input.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'input'",
          "computed": false
        }
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "This prop can be used to pass a ref callback to the `input` element."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a textarea element will be rendered.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `input` element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The short hint displayed in the input before the user enters a value."
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "It prevents the user from changing the value of the field\n(not from interacting with the field)."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be required."
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Number of rows to display when multiline option is set to true."
      },
      "rowsMax": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Maximum number of rows to display when multiline option is set to true."
      },
      "startAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Start `InputAdornment` for this component."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the `input` element, required for a controlled component."
      }
    },
    "name": "FilledInput",
    "styles": {
      "classes": [
        "root",
        "underline",
        "focused",
        "disabled",
        "adornedStart",
        "adornedEnd",
        "error",
        "marginDense",
        "multiline",
        "input",
        "inputMarginDense",
        "inputSelect",
        "inputMultiline",
        "inputAdornedStart",
        "inputAdornedEnd"
      ],
      "name": "MuiFilledInput",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "underline": "Styles applied to the root element if `disableUnderline={false}`.",
        "focused": "Styles applied to the root element if the component is focused.",
        "disabled": "Styles applied to the root element if `disabled={true}`.",
        "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
        "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
        "error": "Styles applied to the root element if `error={true}`.",
        "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
        "multiline": "Styles applied to the root element if `multiline={true}`.",
        "input": "Styles applied to the `input` element.",
        "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
        "inputSelect": "Styles applied to the `input` element if `select={true}`.",
        "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
        "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
        "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/FilledInput/FilledInput.js",
    "inheritance": {
      "component": "InputBase",
      "pathname": "/api/input-base"
    }
  },
  "FormControlLabel": {
    "description": "Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\nUse this component if you want to display an extra label.",
    "methods": [],
    "props": {
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component appears selected."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "control": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the control will be disabled."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "This prop can be used to pass a ref callback to the `input` element."
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The text to be used in an enclosing label element."
      },
      "labelPlacement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'end'",
              "computed": false
            },
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The position of the label.",
        "defaultValue": {
          "value": "'end'",
          "computed": false
        }
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the state is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.checked`.\n@param {boolean} checked The `checked` value of the switch"
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the component."
      }
    },
    "name": "FormControlLabel",
    "styles": {
      "classes": [
        "root",
        "labelPlacementStart",
        "labelPlacementTop",
        "labelPlacementBottom",
        "disabled",
        "label"
      ],
      "name": "MuiFormControlLabel",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "labelPlacementStart": "Styles applied to the root element if `labelPlacement=\"start\"`.",
        "labelPlacementTop": "Styles applied to the root element if `labelPlacement=\"top\"`.",
        "labelPlacementBottom": "Styles applied to the root element if `labelPlacement=\"bottom\"`.",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
        "label": "Styles applied to the label's Typography component."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/FormControlLabel/FormControlLabel.js",
    "inheritance": null
  },
  "FormGroup": {
    "description": "`FormGroup` wraps controls such as `Checkbox` and `Switch`.\nIt provides compact row layout.\nFor the `Radio`, you should be using the `RadioGroup` component instead of this one.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "row": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display group of elements in a compact row.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "FormGroup",
    "styles": {
      "classes": [
        "root",
        "row"
      ],
      "name": "MuiFormGroup",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "row": "Styles applied to the root element if `row={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/FormGroup/FormGroup.js",
    "inheritance": null
  },
  "FormHelperText": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'p'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the helper text should be displayed in a disabled state."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, helper text should be displayed in an error state."
      },
      "filled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the helper text should use filled classes key."
      },
      "focused": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the helper text should use focused classes key."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dense'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the helper text should use required classes key."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use."
      }
    },
    "name": "FormHelperText",
    "styles": {
      "classes": [
        "root",
        "error",
        "disabled",
        "marginDense",
        "contained",
        "focused",
        "filled",
        "required"
      ],
      "name": "MuiFormHelperText",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "error": "Pseudo-class applied to the root element if `error={true}`.",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
        "marginDense": "Styles applied to the root element if `margin=\"dense\"`.",
        "contained": "Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`.",
        "focused": "Pseudo-class applied to the root element if `focused={true}`.",
        "filled": "Pseudo-class applied to the root element if `filled={true}`.",
        "required": "Pseudo-class applied to the root element if `required={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/FormHelperText/FormHelperText.js",
    "inheritance": null
  },
  "FormLabel": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'label'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label should be displayed in a disabled state."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label should be displayed in an error state."
      },
      "filled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label should use filled classes key."
      },
      "focused": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input of this label is focused (used by `FormGroup` components)."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label will indicate that the input is required."
      }
    },
    "name": "FormLabel",
    "styles": {
      "classes": [
        "root",
        "focused",
        "disabled",
        "error",
        "filled",
        "required",
        "asterisk"
      ],
      "name": "MuiFormLabel",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "focused": "Pseudo-class applied to the root element if `focused={true}`.",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
        "error": "Pseudo-class applied to the root element if `error={true}`.",
        "filled": "Pseudo-class applied to the root element if `filled={true}`.",
        "required": "Pseudo-class applied to the root element if `required={true}`.",
        "asterisk": "Styles applied to the asterisk element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/FormLabel/FormLabel.js",
    "inheritance": null
  },
  "Grid": {
    "description": "",
    "displayName": "ForwardRef(Grid)",
    "methods": [],
    "props": {
      "alignContent": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'stretch'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'flex-end'",
              "computed": false
            },
            {
              "value": "'space-between'",
              "computed": false
            },
            {
              "value": "'space-around'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the `align-content` style property.\nIt's applied for all screen sizes.",
        "defaultValue": {
          "value": "'stretch'",
          "computed": false
        }
      },
      "alignItems": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'flex-end'",
              "computed": false
            },
            {
              "value": "'stretch'",
              "computed": false
            },
            {
              "value": "'baseline'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the `align-items` style property.\nIt's applied for all screen sizes.",
        "defaultValue": {
          "value": "'stretch'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "container": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will have the flex *container* behavior.\nYou should be wrapping *items* with a *container*.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'row'",
              "computed": false
            },
            {
              "value": "'row-reverse'",
              "computed": false
            },
            {
              "value": "'column'",
              "computed": false
            },
            {
              "value": "'column-reverse'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the `flex-direction` style property.\nIt is applied for all screen sizes.",
        "defaultValue": {
          "value": "'row'",
          "computed": false
        }
      },
      "item": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will have the flex *item* behavior.\nYou should be wrapping *items* with a *container*.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "justify": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'flex-end'",
              "computed": false
            },
            {
              "value": "'space-between'",
              "computed": false
            },
            {
              "value": "'space-around'",
              "computed": false
            },
            {
              "value": "'space-evenly'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the `justify-content` style property.\nIt is applied for all screen sizes.",
        "defaultValue": {
          "value": "'flex-start'",
          "computed": false
        }
      },
      "lg": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use.\nIt's applied for the `lg` breakpoint and wider screens if not overridden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "md": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use.\nIt's applied for the `md` breakpoint and wider screens if not overridden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "sm": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use.\nIt's applied for the `sm` breakpoint and wider screens if not overridden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "spacing": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "0",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the space between the type `item` component.\nIt can only be used on a type `container` component.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "wrap": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'nowrap'",
              "computed": false
            },
            {
              "value": "'wrap'",
              "computed": false
            },
            {
              "value": "'wrap-reverse'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the `flex-wrap` style property.\nIt's applied for all screen sizes.",
        "defaultValue": {
          "value": "'wrap'",
          "computed": false
        }
      },
      "xl": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use.\nIt's applied for the `xl` breakpoint and wider screens.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xs": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use.\nIt's applied for all the screen sizes with the lowest priority.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "zeroMinWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, it sets `min-width: 0` on the item.\nRefer to the limitations section of the documentation to better understand the use case.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "Grid",
    "styles": {
      "classes": [
        "root",
        "container",
        "item",
        "zeroMinWidth",
        "direction-xs-column",
        "direction-xs-column-reverse",
        "direction-xs-row-reverse",
        "wrap-xs-nowrap",
        "wrap-xs-wrap-reverse",
        "align-items-xs-center",
        "align-items-xs-flex-start",
        "align-items-xs-flex-end",
        "align-items-xs-baseline",
        "align-content-xs-center",
        "align-content-xs-flex-start",
        "align-content-xs-flex-end",
        "align-content-xs-space-between",
        "align-content-xs-space-around",
        "justify-xs-center",
        "justify-xs-flex-end",
        "justify-xs-space-between",
        "justify-xs-space-around",
        "justify-xs-space-evenly",
        "spacing-xs-1",
        "spacing-xs-2",
        "spacing-xs-3",
        "spacing-xs-4",
        "spacing-xs-5",
        "spacing-xs-6",
        "spacing-xs-7",
        "spacing-xs-8",
        "spacing-xs-9",
        "spacing-xs-10",
        "grid-xs-auto",
        "grid-xs-true",
        "grid-xs-1",
        "grid-xs-2",
        "grid-xs-3",
        "grid-xs-4",
        "grid-xs-5",
        "grid-xs-6",
        "grid-xs-7",
        "grid-xs-8",
        "grid-xs-9",
        "grid-xs-10",
        "grid-xs-11",
        "grid-xs-12"
      ],
      "name": "MuiGrid",
      "descriptions": {
        "root": "Styles applied to the root element",
        "container": "Styles applied to the root element if `container={true}`.",
        "item": "Styles applied to the root element if `item={true}`.",
        "zeroMinWidth": "Styles applied to the root element if `zeroMinWidth={true}`.",
        "": "Styles applied to the root element if `justify=\"space-evenly\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Grid/Grid.js",
    "inheritance": null
  },
  "GridListTile": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Theoretically you can pass any node as children, but the main use case is to pass an img,\nin which case GridListTile takes care of making the image \"cover\" available space\n(similar to `background-size: cover` or to `object-fit: cover`)."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "cols": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of the tile in number of grid cells.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'li'",
          "computed": false
        }
      },
      "rows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Height of the tile in number of grid cells.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      }
    },
    "name": "GridListTile",
    "styles": {
      "classes": [
        "root",
        "tile",
        "imgFullHeight",
        "imgFullWidth"
      ],
      "name": "MuiGridListTile",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "tile": "Styles applied to the `div` element that wraps the children.",
        "imgFullHeight": "Styles applied to an `img` element child, if needed to ensure it covers the tile.",
        "imgFullWidth": "Styles applied to an `img` element child, if needed to ensure it covers the tile."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/GridListTile/GridListTile.js",
    "inheritance": null
  },
  "GridList": {
    "description": "",
    "methods": [],
    "props": {
      "cellHeight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'auto'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "Number of px for one cell height.\nYou can set `'auto'` if you want to let the children determine the height.",
        "defaultValue": {
          "value": "180",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Grid Tiles that will be in Grid List."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "cols": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of columns.",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'ul'",
          "computed": false
        }
      },
      "spacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of px for the spacing between tiles.",
        "defaultValue": {
          "value": "4",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "GridList",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiGridList",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/GridList/GridList.js",
    "inheritance": null
  },
  "GridListTileBar": {
    "description": "",
    "methods": [],
    "props": {
      "actionIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "An IconButton element to be used as secondary action target\n(primary action target is the tile itself)."
      },
      "actionPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Position of secondary action IconButton.",
        "defaultValue": {
          "value": "'right'",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "subtitle": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "String or element serving as subtitle (support text)."
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Title to be displayed on tile."
      },
      "titlePosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Position of the title bar.",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      }
    },
    "name": "GridListTileBar",
    "styles": {
      "classes": [
        "root",
        "titlePositionBottom",
        "titlePositionTop",
        "rootSubtitle",
        "titleWrap",
        "titleWrapActionPosLeft",
        "titleWrapActionPosRight",
        "title",
        "subtitle",
        "actionIcon",
        "actionIconActionPosLeft"
      ],
      "name": "MuiGridListTileBar",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "titlePositionBottom": "Styles applied to the root element if `titlePosition=\"bottom\"`.",
        "titlePositionTop": "Styles applied to the root element if `titlePosition=\"top\"`.",
        "rootSubtitle": "Styles applied to the root element if a `subtitle` is provided.",
        "titleWrap": "Styles applied to the title and subtitle container element.",
        "titleWrapActionPosLeft": "Styles applied to the container element if `actionPosition=\"left\"`.",
        "titleWrapActionPosRight": "Styles applied to the container element if `actionPosition=\"right\"`.",
        "title": "Styles applied to the title container element.",
        "subtitle": "Styles applied to the subtitle container element.",
        "actionIcon": "Styles applied to the actionIcon if supplied.",
        "actionIconActionPosLeft": "Styles applied to the actionIcon if `actionPosition=\"left\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/GridListTileBar/GridListTileBar.js",
    "inheritance": null
  },
  "Icon": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The name of the icon font ligature."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'action'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'disabled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'span'",
          "computed": false
        }
      },
      "fontSize": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      }
    },
    "name": "Icon",
    "styles": {
      "classes": [
        "root",
        "colorPrimary",
        "colorSecondary",
        "colorAction",
        "colorError",
        "colorDisabled",
        "fontSizeInherit",
        "fontSizeSmall",
        "fontSizeLarge"
      ],
      "name": "MuiIcon",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
        "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
        "colorAction": "Styles applied to the root element if `color=\"action\"`.",
        "colorError": "Styles applied to the root element if `color=\"error\"`.",
        "colorDisabled": "Styles applied to the root element if `color=\"disabled\"`.",
        "fontSizeSmall": "Styles applied to the root element if `fontSize=\"small\"`.",
        "fontSizeLarge": "Styles applied to the root element if `fontSize=\"large\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Icon/Icon.js",
    "inheritance": null
  },
  "Hidden": {
    "description": "Responsively hides children based on the selected implementation.",
    "displayName": "Hidden",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "implementation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'js'",
              "computed": false
            },
            {
              "value": "'css'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify which implementation to use.  'js' is the default, 'css' works better for\nserver-side rendering.",
        "defaultValue": {
          "value": "'js'",
          "computed": false
        }
      },
      "initialWidth": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'xs'",
              "computed": false
            },
            {
              "value": "'sm'",
              "computed": false
            },
            {
              "value": "'md'",
              "computed": false
            },
            {
              "value": "'lg'",
              "computed": false
            },
            {
              "value": "'xl'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "You can use this prop when choosing the `js` implementation with server-side rendering.\n\nAs `window.innerWidth` is unavailable on the server,\nwe default to rendering an empty component during the first mount.\nYou might want to use an heuristic to approximate\nthe screen width of the client browser screen width.\n\nFor instance, you could be using the user-agent or the client-hints.\nhttps://caniuse.com/#search=client%20hint"
      },
      "lgDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "lgUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "mdDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "mdUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "only": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "'xs'",
                  "computed": false
                },
                {
                  "value": "'sm'",
                  "computed": false
                },
                {
                  "value": "'md'",
                  "computed": false
                },
                {
                  "value": "'lg'",
                  "computed": false
                },
                {
                  "value": "'xl'",
                  "computed": false
                }
              ]
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "enum",
                "value": [
                  {
                    "value": "'xs'",
                    "computed": false
                  },
                  {
                    "value": "'sm'",
                    "computed": false
                  },
                  {
                    "value": "'md'",
                    "computed": false
                  },
                  {
                    "value": "'lg'",
                    "computed": false
                  },
                  {
                    "value": "'xl'",
                    "computed": false
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "description": "Hide the given breakpoint(s)."
      },
      "smDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "smUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xlDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xlUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xsDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xsUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "Hidden",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Hidden/Hidden.js",
    "inheritance": null
  },
  "IconButton": {
    "description": "Refer to the [Icons](/components/icons/) section of the documentation\nregarding the available icon options.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "custom",
          "raw": "chainPropTypes(PropTypes.node, props => {\n  const found = React.Children.toArray(props.children).some(\n    child => React.isValidElement(child) && child.props.onClick,\n  );\n\n  if (found) {\n    return new Error(\n      [\n        'Material-UI: you are providing an onClick event listener ' +\n          'to a child of a button element.',\n        'Firefox will never trigger the event.',\n        'You should move the onClick listener to the parent button element.',\n        'https://github.com/mui-org/material-ui/issues/13957',\n      ].join('\\n'),\n    );\n  }\n\n  return null;\n})"
        },
        "required": false,
        "description": "The icon element."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the button will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableFocusRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled."
      },
      "edge": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If given, uses a negative margin to counteract the padding on one\nside (this is often helpful for aligning the left or right\nside of the icon with content above or below, without ruining the border\nsize and shape).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      }
    },
    "name": "IconButton",
    "styles": {
      "classes": [
        "root",
        "edgeStart",
        "edgeEnd",
        "colorInherit",
        "colorPrimary",
        "colorSecondary",
        "disabled",
        "sizeSmall",
        "label"
      ],
      "name": "MuiIconButton",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "edgeStart": "Styles applied to the root element if `edge=\"start\"`.",
        "edgeEnd": "Styles applied to the root element if `edge=\"end\"`.",
        "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
        "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
        "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
        "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
        "label": "Styles applied to the children container element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/IconButton/IconButton.js",
    "inheritance": {
      "component": "ButtonBase",
      "pathname": "/api/button-base"
    }
  },
  "Input": {
    "description": "",
    "methods": [],
    "props": {
      "autoComplete": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill)."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be focused during the first mount."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the wrapper element."
      },
      "defaultValue": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The default `input` element value. Use when the component is not controlled."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be disabled."
      },
      "disableUnderline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will not have an underline."
      },
      "endAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "End `InputAdornment` for this component."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will take up the full width of its container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the native input.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'input'",
          "computed": false
        }
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "This prop can be used to pass a ref callback to the `input` element."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a textarea element will be rendered.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `input` element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The short hint displayed in the input before the user enters a value."
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "It prevents the user from changing the value of the field\n(not from interacting with the field)."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be required."
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Number of rows to display when multiline option is set to true."
      },
      "rowsMax": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Maximum number of rows to display when multiline option is set to true."
      },
      "startAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Start `InputAdornment` for this component."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the `input` element, required for a controlled component."
      }
    },
    "name": "Input",
    "styles": {
      "classes": [
        "root",
        "formControl",
        "focused",
        "disabled",
        "underline",
        "error",
        "multiline",
        "fullWidth",
        "input",
        "inputMarginDense",
        "inputMultiline",
        "inputTypeSearch"
      ],
      "name": "MuiInput",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
        "focused": "Styles applied to the root element if the component is focused.",
        "disabled": "Styles applied to the root element if `disabled={true}`.",
        "underline": "Styles applied to the root element if `disableUnderline={false}`.",
        "error": "Styles applied to the root element if `error={true}`.",
        "multiline": "Styles applied to the root element if `multiline={true}`.",
        "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
        "input": "Styles applied to the `input` element.",
        "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
        "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
        "inputTypeSearch": "Styles applied to the `input` element if `type=\"search\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Input/Input.js",
    "inheritance": {
      "component": "InputBase",
      "pathname": "/api/input-base"
    }
  },
  "InputAdornment": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the component, normally an `IconButton` or string."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "disablePointerEvents": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable pointer events on the root.\nThis allows for the content of the adornment to focus the input on click.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableTypography": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If children is a string then disable wrapping in a Typography component.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "muiFormControl": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The position this adornment should appear relative to the `Input`."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.\nNote: If you are using the `TextField` component or the `FormControl` component\nyou do not have to set this manually."
      }
    },
    "name": "InputAdornment",
    "styles": {
      "classes": [
        "root",
        "filled",
        "positionStart",
        "positionEnd",
        "disablePointerEvents"
      ],
      "name": "MuiInputAdornment",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "filled": "Styles applied to the root element if `variant=\"filled\"`.",
        "positionStart": "Styles applied to the root element if `position=\"start\"`.",
        "positionEnd": "Styles applied to the root element if `position=\"end\"`.",
        "disablePointerEvents": "Styles applied to the root element if `disablePointerEvents=true`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/InputAdornment/InputAdornment.js",
    "inheritance": null
  },
  "InputLabel": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The contents of the `InputLabel`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableAnimation": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the transition animation is disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, apply disabled class."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label will be displayed in an error state."
      },
      "focused": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input of this label is focused."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dense'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "if `true`, the label will indicate that the input is required."
      },
      "shrink": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label is shrunk."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use."
      }
    },
    "name": "InputLabel",
    "styles": {
      "classes": [
        "root",
        "focused",
        "disabled",
        "error",
        "required",
        "asterisk",
        "formControl",
        "marginDense",
        "shrink",
        "animated",
        "filled",
        "outlined"
      ],
      "name": "MuiInputLabel",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "focused": "Pseudo-class applied to the root element if `focused={true}`.",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
        "error": "Pseudo-class applied to the root element if `error={true}`.",
        "required": "Pseudo-class applied to the root element if `required={true}`.",
        "asterisk": "Pseudo-class applied to the asterisk element.",
        "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
        "marginDense": "Styles applied to the root element if `margin=\"dense\"`.",
        "shrink": "Styles applied to the `input` element if `shrink={true}`.",
        "animated": "Styles applied to the `input` element if `disableAnimation={false}`.",
        "filled": "Styles applied to the root element if `variant=\"filled\"`.",
        "outlined": "Styles applied to the root element if `variant=\"outlined\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/InputLabel/InputLabel.js",
    "inheritance": {
      "component": "FormLabel",
      "pathname": "/api/form-label"
    }
  },
  "Link": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the link."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'textPrimary'",
              "computed": false
            },
            {
              "value": "'textSecondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the link.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'a'",
          "computed": false
        }
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onFocus": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "TypographyClasses": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "`classes` prop applied to the [`Typography`](/api/typography/) element."
      },
      "underline": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'none'",
              "computed": false
            },
            {
              "value": "'hover'",
              "computed": false
            },
            {
              "value": "'always'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls when the link should have an underline.",
        "defaultValue": {
          "value": "'hover'",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Applies the theme typography styles.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      }
    },
    "name": "Link",
    "styles": {
      "classes": [
        "root",
        "underlineNone",
        "underlineHover",
        "underlineAlways",
        "button",
        "focusVisible"
      ],
      "name": "MuiLink",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "underlineNone": "Styles applied to the root element if `underline=\"none\"`.",
        "underlineHover": "Styles applied to the root element if `underline=\"hover\"`.",
        "underlineAlways": "Styles applied to the root element if `underline=\"always\"`.",
        "button": "Styles applied to the root element if `component=\"button\"`.",
        "focusVisible": "Pseudo-class applied to the root element if the link is keyboard focused."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Link/Link.js",
    "inheritance": {
      "component": "Typography",
      "pathname": "/api/typography"
    }
  },
  "List": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'ul'",
          "computed": false
        }
      },
      "dense": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used for\nthe list and list items.\nThe prop is available to descendant components as the `dense` context.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disablePadding": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, vertical padding will be removed from the list.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "subheader": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the subheader, normally `ListSubheader`."
      }
    },
    "name": "List",
    "styles": {
      "classes": [
        "root",
        "padding",
        "dense",
        "subheader"
      ],
      "name": "MuiList",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "padding": "Styles applied to the root element if `disablePadding={false}`.",
        "dense": "Styles applied to the root element if dense.",
        "subheader": "Styles applied to the root element if a `subheader` is provided."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/List/List.js",
    "inheritance": null
  },
  "ListItem": {
    "description": "Uses an additional container component if `ListItemSecondaryAction` is the last child.",
    "methods": [],
    "props": {
      "alignItems": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the `align-items` style property.",
        "defaultValue": {
          "value": "'center'",
          "computed": false
        }
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the list item will be focused during the first mount.\nFocus will also be triggered if the value changes from false to true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "button": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the list item will be a button (using `ButtonBase`).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "custom",
          "raw": "chainPropTypes(PropTypes.node, props => {\n  const children = React.Children.toArray(props.children);\n\n  // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)\n  let secondaryActionIndex = -1;\n  for (let i = children.length - 1; i >= 0; i -= 1) {\n    const child = children[i];\n    if (isMuiElement(child, ['ListItemSecondaryAction'])) {\n      secondaryActionIndex = i;\n      break;\n    }\n  }\n\n  //  is ListItemSecondaryAction the last child of ListItem\n  if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {\n    return new Error(\n      'Material-UI: you used an element after ListItemSecondaryAction. ' +\n        'For ListItem to detect that it has a secondary action ' +\n        'you must pass it as the last child to ListItem.',\n    );\n  }\n\n  return null;\n})"
        },
        "required": false,
        "description": "The content of the component. If a `ListItemSecondaryAction` is used it must\nbe the last child."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.\nBy default, it's a `li` when `button` is `false` and a `div` when `button` is `true`."
      },
      "ContainerComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The container component used when a `ListItemSecondaryAction` is the last child.",
        "defaultValue": {
          "value": "'li'",
          "computed": false
        }
      },
      "ContainerProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the container component if used.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "dense": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the list item will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableGutters": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the left and right padding is removed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "divider": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a 1px light border is added to the bottom of the list item.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "focusVisibleClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use to apply selected styling.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "ListItem",
    "styles": {
      "classes": [
        "root",
        "container",
        "focusVisible",
        "dense",
        "alignItemsFlexStart",
        "disabled",
        "divider",
        "gutters",
        "button",
        "secondaryAction",
        "selected"
      ],
      "name": "MuiListItem",
      "descriptions": {
        "root": "Styles applied to the (normally root) `component` element. May be wrapped by a `container`.",
        "container": "Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`.",
        "focusVisible": "Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`.",
        "dense": "Styles applied to the `component` element if dense.",
        "alignItemsFlexStart": "Styles applied to the `component` element if `alignItems=\"flex-start\"`.",
        "disabled": "Pseudo-class applied to the inner `component` element if `disabled={true}`.",
        "divider": "Styles applied to the inner `component` element if `divider={true}`.",
        "gutters": "Styles applied to the inner `component` element if `disableGutters={false}`.",
        "button": "Styles applied to the inner `component` element if `button={true}`.",
        "secondaryAction": "Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`.",
        "selected": "Pseudo-class applied to the root element if `selected={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ListItem/ListItem.js",
    "inheritance": null
  },
  "ListItemAvatar": {
    "description": "A simple wrapper to apply `List` styles to an `Avatar`.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": true,
        "description": "The content of the component – normally `Avatar`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "ListItemAvatar",
    "styles": {
      "classes": [
        "root",
        "alignItemsFlexStart"
      ],
      "name": "MuiListItemAvatar",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "alignItemsFlexStart": "Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ListItemAvatar/ListItemAvatar.js",
    "inheritance": null
  },
  "ListItemIcon": {
    "description": "A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": true,
        "description": "The content of the component, normally `Icon`, `SvgIcon`,\nor a `@material-ui/icons` SVG icon element."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "ListItemIcon",
    "styles": {
      "classes": [
        "root",
        "alignItemsFlexStart"
      ],
      "name": "MuiListItemIcon",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "alignItemsFlexStart": "Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ListItemIcon/ListItemIcon.js",
    "inheritance": null
  },
  "ListItemSecondaryAction": {
    "description": "Must be used as the last child of ListItem to function properly.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component, normally an `IconButton` or selection control."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "ListItemSecondaryAction",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiListItemSecondaryAction",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ListItemSecondaryAction/ListItemSecondaryAction.js",
    "inheritance": null
  },
  "ListItemText": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Alias for the `primary` property."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableTypography": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the children won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `children` (or `primary`) text, and optional `secondary` text\nwith the Typography component.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "inset": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the children will be indented.\nThis should be used if there is no left avatar or left icon.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "primary": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The main content element."
      },
      "primaryTypographyProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "These props will be forwarded to the primary typography component\n(as long as disableTypography is not `true`)."
      },
      "secondary": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The secondary content element."
      },
      "secondaryTypographyProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "These props will be forwarded to the secondary typography component\n(as long as disableTypography is not `true`)."
      }
    },
    "name": "ListItemText",
    "styles": {
      "classes": [
        "root",
        "multiline",
        "dense",
        "inset",
        "primary",
        "secondary"
      ],
      "name": "MuiListItemText",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "multiline": "Styles applied to the `Typography` components if primary and secondary are set.",
        "dense": "Styles applied to the `Typography` components if dense.",
        "inset": "Styles applied to the root element if `inset={true}`.",
        "primary": "Styles applied to the primary `Typography` component.",
        "secondary": "Styles applied to the secondary `Typography` component."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ListItemText/ListItemText.js",
    "inheritance": null
  },
  "ListSubheader": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'li'",
          "computed": false
        }
      },
      "disableGutters": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the List Subheader will not have gutters.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableSticky": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the List Subheader will not stick to the top during scroll.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "inset": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the List Subheader will be indented.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "ListSubheader",
    "styles": {
      "classes": [
        "root",
        "colorPrimary",
        "colorInherit",
        "gutters",
        "inset",
        "sticky"
      ],
      "name": "MuiListSubheader",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
        "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
        "gutters": "Styles applied to the inner `component` element if `disableGutters={false}`.",
        "inset": "Styles applied to the root element if `inset={true}`.",
        "sticky": "Styles applied to the root element if `disableSticky={false}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ListSubheader/ListSubheader.js",
    "inheritance": null
  },
  "Menu": {
    "description": "",
    "methods": [],
    "props": {
      "anchorEl": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "The DOM element used to set the position of the menu."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true` (default), the menu list (possibly a particular item depending on the menu variant) will receive focus on open."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Menu contents, normally `MenuItem`s."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "disableAutoFocusItem": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Same as `autoFocus=false`.\n@deprecated Use `autoFocus` instead",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "MenuListProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`MenuList`](/api/menu-list/) element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback\n@param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`"
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the Menu enters."
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the Menu has entered."
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the Menu is entering."
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the Menu exits."
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the Menu has exited."
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the Menu is exiting."
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the menu is visible."
      },
      "PaperProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "PopoverClasses": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "`classes` prop applied to the [`Popover`](/api/popover/) element."
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'auto'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "The length of the transition in `ms`, or 'auto'",
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'menu'",
              "computed": false
            },
            {
              "value": "'selectedMenu'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use. Use `menu` to prevent selected items from impacting the initial focus\nand the vertical alignment relative to the anchor element.",
        "defaultValue": {
          "value": "'selectedMenu'",
          "computed": false
        }
      }
    },
    "name": "Menu",
    "styles": {
      "classes": [
        "paper",
        "list"
      ],
      "name": "MuiMenu",
      "descriptions": {
        "paper": "Styles applied to the `Paper` component.",
        "list": "Styles applied to the `List` component via `MenuList`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Menu/Menu.js",
    "inheritance": {
      "component": "Popover",
      "pathname": "/api/popover"
    }
  },
  "MenuItem": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Menu item contents."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'li'",
          "computed": false
        }
      },
      "dense": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableGutters": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the left and right padding is removed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'menuitem'",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "tabIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "MenuItem",
    "styles": {
      "classes": [
        "root",
        "gutters",
        "selected",
        "dense"
      ],
      "name": "MuiMenuItem",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "gutters": "Styles applied to the root element if `disableGutters={false}`.",
        "selected": "Styles applied to the root element if `selected={true}`.",
        "dense": "Styles applied to the root element if dense."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/MenuItem/MenuItem.js",
    "inheritance": {
      "component": "ListItem",
      "pathname": "/api/list-item"
    }
  },
  "MobileStepper": {
    "description": "",
    "methods": [],
    "props": {
      "activeStep": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set the active step (zero based index).\nDefines which dot is highlighted when the variant is 'dots'.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "backButton": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "A back button element. For instance, it can be a `Button` or an `IconButton`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "LinearProgressProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `LinearProgress` element."
      },
      "nextButton": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "A next button element. For instance, it can be a `Button` or an `IconButton`."
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'static'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set the positioning type.",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      },
      "steps": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The total steps."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'text'",
              "computed": false
            },
            {
              "value": "'dots'",
              "computed": false
            },
            {
              "value": "'progress'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'dots'",
          "computed": false
        }
      }
    },
    "name": "MobileStepper",
    "styles": {
      "classes": [
        "root",
        "positionBottom",
        "positionTop",
        "positionStatic",
        "dots",
        "dot",
        "dotActive",
        "progress"
      ],
      "name": "MuiMobileStepper",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "positionBottom": "Styles applied to the root element if `position=\"bottom\"`.",
        "positionTop": "Styles applied to the root element if `position=\"top\"`.",
        "positionStatic": "Styles applied to the root element if `position=\"static\"`.",
        "dots": "Styles applied to the dots container if `variant=\"dots\"`.",
        "dot": "Styles applied to each dot if `variant=\"dots\"`.",
        "dotActive": "Styles applied to a dot if `variant=\"dots\"` and this is the active step.",
        "progress": "Styles applied to the Linear Progress component if `variant=\"progress\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/MobileStepper/MobileStepper.js",
    "inheritance": {
      "component": "Paper",
      "pathname": "/api/paper"
    }
  },
  "MenuList": {
    "description": "",
    "methods": [],
    "props": {
      "actions": {
        "type": {
          "name": "shape",
          "value": {
            "current": {
              "name": "object",
              "required": false
            }
          }
        },
        "required": false,
        "description": "@ignore"
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the list will be focused during the first mount.\nFocus will also be triggered if the value changes from false to true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "MenuList contents, normally `MenuItem`s."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableListWrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the menu items will not wrap focus.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "MenuList",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": true,
    "filename": "/packages/material-ui/src/MenuList/MenuList.js",
    "inheritance": {
      "component": "List",
      "pathname": "/api/list"
    }
  },
  "NativeSelect": {
    "description": "An alternative to `<Select native />` with a much smaller bundle size footprint.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The option elements to populate the select with.\nCan be some `<option>` elements."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "IconComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The icon that displays the arrow.",
        "defaultValue": {
          "value": "ArrowDropDownIcon",
          "computed": true
        }
      },
      "input": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "An `Input` element; does not have to be a material-ui specific `Input`.",
        "defaultValue": {
          "value": "<Input />",
          "computed": false
        }
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the `select` element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function fired when a menu item is selected.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`."
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The input value."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use."
      }
    },
    "name": "NativeSelect",
    "styles": {
      "classes": [
        "root",
        "select",
        "filled",
        "outlined",
        "selectMenu",
        "disabled",
        "icon"
      ],
      "name": "MuiNativeSelect",
      "descriptions": {
        "root": "Styles applied to the select component `root` class.",
        "select": "Styles applied to the select component `select` class.",
        "filled": "Styles applied to the select component if `variant=\"filled\"`.",
        "outlined": "Styles applied to the select component if `variant=\"outlined\"`.",
        "selectMenu": "Styles applied to the select component `selectMenu` class.",
        "disabled": "Pseudo-class applied to the select component `disabled` class.",
        "icon": "Styles applied to the select component `icon` class."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/NativeSelect/NativeSelect.js",
    "inheritance": {
      "component": "Input",
      "pathname": "/api/input"
    }
  },
  "NoSsr": {
    "description": "NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n\nThis component can be useful in a variety of situations:\n- Escape hatch for broken dependencies not supporting SSR.\n- Improve the time-to-first paint on the client by only rendering above the fold.\n- Reduce the rendering time on the server.\n- Under too heavy server load, you can turn on service degradation.",
    "displayName": "NoSsr",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "You can wrap a node."
      },
      "defer": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will not only prevent server-side rendering.\nIt will also defer the rendering of the children into a different screen frame.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fallback": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The fallback content to display.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      }
    },
    "name": "NoSsr",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": false,
    "filename": "/packages/material-ui/src/NoSsr/NoSsr.js",
    "inheritance": null
  },
  "OutlinedInput": {
    "description": "",
    "methods": [],
    "props": {
      "autoComplete": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill)."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be focused during the first mount."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the wrapper element."
      },
      "defaultValue": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The default `input` element value. Use when the component is not controlled."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be disabled."
      },
      "endAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "End `InputAdornment` for this component."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will take up the full width of its container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the native input.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'input'",
          "computed": false
        }
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "This prop can be used to pass a ref callback to the `input` element."
      },
      "labelWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the label.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a textarea element will be rendered.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `input` element."
      },
      "notched": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the outline is notched to accommodate the label."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The short hint displayed in the input before the user enters a value."
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "It prevents the user from changing the value of the field\n(not from interacting with the field)."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be required."
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Number of rows to display when multiline option is set to true."
      },
      "rowsMax": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Maximum number of rows to display when multiline option is set to true."
      },
      "startAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Start `InputAdornment` for this component."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the `input` element, required for a controlled component."
      }
    },
    "name": "OutlinedInput",
    "styles": {
      "classes": [
        "root",
        "focused",
        "disabled",
        "adornedStart",
        "adornedEnd",
        "error",
        "marginDense",
        "multiline",
        "notchedOutline",
        "input",
        "inputMarginDense",
        "inputSelect",
        "inputMultiline",
        "inputAdornedStart",
        "inputAdornedEnd"
      ],
      "name": "MuiOutlinedInput",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "focused": "Styles applied to the root element if the component is focused.",
        "disabled": "Styles applied to the root element if `disabled={true}`.",
        "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
        "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
        "error": "Styles applied to the root element if `error={true}`.",
        "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
        "multiline": "Styles applied to the root element if `multiline={true}`.",
        "notchedOutline": "Styles applied to the `NotchedOutline` element.",
        "input": "Styles applied to the `input` element.",
        "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
        "inputSelect": "Styles applied to the `input` element if `select={true}`.",
        "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
        "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
        "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/OutlinedInput/OutlinedInput.js",
    "inheritance": {
      "component": "InputBase",
      "pathname": "/api/input-base"
    }
  },
  "Paper": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Shadow depth, corresponds to `dp` in the spec.\nIt accepts values between 0 and 24 inclusive.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "square": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, rounded corners are disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "Paper",
    "styles": {
      "classes": [
        "root",
        "rounded",
        "elevation0",
        "elevation1",
        "elevation2",
        "elevation3",
        "elevation4",
        "elevation5",
        "elevation6",
        "elevation7",
        "elevation8",
        "elevation9",
        "elevation10",
        "elevation11",
        "elevation12",
        "elevation13",
        "elevation14",
        "elevation15",
        "elevation16",
        "elevation17",
        "elevation18",
        "elevation19",
        "elevation20",
        "elevation21",
        "elevation22",
        "elevation23",
        "elevation24"
      ],
      "name": "MuiPaper",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "rounded": "Styles applied to the root element if `square={false}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Paper/Paper.js",
    "inheritance": null
  },
  "Popper": {
    "description": "Poppers rely on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.",
    "methods": [],
    "props": {
      "anchorEl": {
        "type": {
          "name": "custom",
          "raw": "chainPropTypes(PropTypes.oneOfType([PropTypes.object, PropTypes.func]), props => {\n  if (props.open) {\n    const resolvedAnchorEl = getAnchorEl(props.anchorEl);\n\n    if (resolvedAnchorEl instanceof Element) {\n      const box = resolvedAnchorEl.getBoundingClientRect();\n\n      if (\n        process.env.NODE_ENV !== 'test' &&\n        box.top === 0 &&\n        box.left === 0 &&\n        box.right === 0 &&\n        box.bottom === 0\n      ) {\n        return new Error(\n          [\n            'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n            'The reference element should be part of the document layout.',\n            \"Make sure the element is present in the document or that it's not display none.\",\n          ].join('\\n'),\n        );\n      }\n    } else if (\n      !resolvedAnchorEl ||\n      typeof resolvedAnchorEl.clientWidth !== 'number' ||\n      typeof resolvedAnchorEl.clientHeight !== 'number' ||\n      typeof resolvedAnchorEl.getBoundingClientRect !== 'function'\n    ) {\n      return new Error(\n        [\n          'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n          'It should be an HTML Element instance or a referenceObject:',\n          'https://popper.js.org/popper-documentation.html#referenceObject.',\n        ].join('\\n'),\n      );\n    }\n  }\n\n  return null;\n})"
        },
        "required": false,
        "description": "This is the reference element, or a function that returns the reference element,\nthat may be used to set the position of the popover.\nThe return value will passed as the reference object of the Popper\ninstance.\n\nThe reference element should be an HTML Element instance or a referenceObject:\nhttps://popper.js.org/popper-documentation.html#referenceObject."
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "node"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": true,
        "description": "Popper render function or node."
      },
      "container": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "A node, component instance, or function that returns either.\nThe `container` will passed to the Modal component.\nBy default, it uses the body of the anchorEl's top-level document object,\nso it's simply `document.body` most of the time."
      },
      "disablePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the portal behavior.\nThe children stay within it's parent DOM hierarchy.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "keepMounted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Always keep the children in the DOM.\nThis prop can be useful in SEO situation or\nwhen you want to maximize the responsiveness of the Popper.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "modifiers": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Popper.js is based on a \"plugin-like\" architecture,\nmost of its features are fully encapsulated \"modifiers\".\n\nA modifier is a function that is called each time Popper.js needs to\ncompute the position of the popper.\nFor this reason, modifiers should be very performant to avoid bottlenecks.\nTo learn how to create a modifier, [read the modifiers documentation](https://github.com/FezVrasta/popper.js/blob/master/docs/_includes/popper-documentation.md#modifiers--object)."
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the popper is visible."
      },
      "placement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'bottom-end'",
              "computed": false
            },
            {
              "value": "'bottom-start'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'left-end'",
              "computed": false
            },
            {
              "value": "'left-start'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right-end'",
              "computed": false
            },
            {
              "value": "'right-start'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'top-end'",
              "computed": false
            },
            {
              "value": "'top-start'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Popper placement.",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      },
      "popperOptions": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Options provided to the [`popper.js`](https://github.com/FezVrasta/popper.js) instance.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "popperRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Callback fired when a new popper instance is used."
      },
      "transition": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Help supporting a react-transition-group/Transition component.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "Popper",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Popper/Popper.js",
    "inheritance": null
  },
  "Portal": {
    "description": "Portals provide a first-class way to render children into a DOM node\nthat exists outside the DOM hierarchy of the parent component.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The children to render into the `container`."
      },
      "container": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "A node, component instance, or function that returns either.\nThe `container` will have the portal children appended to it.\nBy default, it uses the body of the top-level document object,\nso it's simply `document.body` most of the time."
      },
      "disablePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the portal behavior.\nThe children stay within it's parent DOM hierarchy.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onRendered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired once the children has been mounted into the `container`.\n\nThis prop will be deprecated and removed in v5, the ref can be used instead."
      }
    },
    "name": "Portal",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": false,
    "filename": "/packages/material-ui/src/Portal/Portal.js",
    "inheritance": null
  },
  "Radio": {
    "description": "",
    "methods": [],
    "props": {
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component is checked."
      },
      "checkedIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is checked."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'secondary'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the switch will be disabled."
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled."
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is unchecked."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "This prop can be used to pass a ref callback to the `input` element."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `input` element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the state is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`.\n@param {boolean} checked The `checked` value of the switch"
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The input component prop `type`."
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the component."
      }
    },
    "name": "Radio",
    "styles": {
      "classes": [
        "root",
        "checked",
        "disabled",
        "colorPrimary",
        "colorSecondary"
      ],
      "name": "MuiRadio",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "checked": "Pseudo-class applied to the root element if `checked={true}`.",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
        "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
        "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Radio/Radio.js",
    "inheritance": {
      "component": "IconButton",
      "pathname": "/api/icon-button"
    }
  },
  "RootRef": {
    "description": "⚠️⚠️⚠️\nIf you want the DOM element of a Material-UI component check out\n[/getting-started/faq/#how-can-i-access-the-dom-element](FAQ: How can I access the DOM element?)\nfirst.\n\nThis component uses `findDOMNode` which is deprecated in React.StrictMode.\n\nHelper component to allow attaching a ref to a\nwrapped element to access the underlying DOM element.\n\nIt's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.\nFor example:\n```jsx\nimport React from 'react';\nimport RootRef from '@material-ui/core/RootRef';\n\nclass MyComponent extends React.Component {\n  constructor() {\n    super();\n    this.domRef = React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(this.domRef.current); // DOM node\n  }\n\n  render() {\n    return (\n      <RootRef rootRef={this.domRef}>\n        <SomeChildComponent />\n      </RootRef>\n    );\n  }\n}\n```",
    "displayName": "RootRef",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": true,
        "description": "The wrapped element."
      },
      "rootRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": true,
        "description": "Provide a way to access the DOM node of the wrapped element.\nYou can provide a callback ref or a `React.createRef()` ref."
      }
    },
    "name": "RootRef",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": false,
    "filename": "/packages/material-ui/src/RootRef/RootRef.js",
    "inheritance": null
  },
  "Select": {
    "description": "",
    "methods": [],
    "props": {
      "autoWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the width of the popover will automatically be set according to the items inside the\nmenu, otherwise it will be at least the width of the select input.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The option elements to populate the select with.\nCan be some `MenuItem` when `native` is false and `option` when `native` is true.\n\n⚠️The `MenuItem` elements **must** be direct descendants when `native` is false."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "displayEmpty": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a value is displayed even if no items are selected.\n\nIn order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.\nYou can only use it when the `native` prop is `false` (default).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "IconComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The icon that displays the arrow.",
        "defaultValue": {
          "value": "ArrowDropDownIcon",
          "computed": true
        }
      },
      "input": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "An `Input` element; does not have to be a material-ui specific `Input`.",
        "defaultValue": {
          "value": "<Input />",
          "computed": false
        }
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\nWhen `native` is `true`, the attributes are applied on the `select` element."
      },
      "MenuProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Menu`](/api/menu/) element."
      },
      "multiple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, `value` must be an array and the menu will support multiple selections.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "native": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will be using a native `select` element.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function fired when a menu item is selected.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`.\n@param {object} [child] The react element that was selected when `native` is `false` (default)."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\nUse in controlled mode (see open).\n\n@param {object} event The event source of the callback"
      },
      "onOpen": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be opened.\nUse in controlled mode (see open).\n\n@param {object} event The event source of the callback"
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Control `select` open state.\nYou can only use it when the `native` prop is `false` (default)."
      },
      "renderValue": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Render the selected value.\nYou can only use it when the `native` prop is `false` (default).\n\n@param {*} value The `value` provided to the component.\n@returns {ReactElement}"
      },
      "SelectDisplayProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the clickable div element."
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The input value.\nThis prop is required when the `native` prop is `false` (default)."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use."
      }
    },
    "name": "Select",
    "styles": {
      "classes": [
        "root",
        "select",
        "filled",
        "outlined",
        "selectMenu",
        "disabled",
        "icon"
      ],
      "name": "MuiSelect",
      "descriptions": {
        "root": "Styles applied to the select component `root` class.",
        "select": "Styles applied to the select component `select` class.",
        "filled": "Styles applied to the select component if `variant=\"filled\"`.",
        "outlined": "Styles applied to the select component if `variant=\"outlined\"`.",
        "selectMenu": "Styles applied to the select component `selectMenu` class.",
        "disabled": "Pseudo-class applied to the select component `disabled` class.",
        "icon": "Styles applied to the select component `icon` class."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Select/Select.js",
    "inheritance": {
      "component": "Input",
      "pathname": "/api/input"
    }
  },
  "SnackbarContent": {
    "description": "",
    "methods": [],
    "props": {
      "action": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The action to display."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "message": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The message to display."
      }
    },
    "name": "SnackbarContent",
    "styles": {
      "classes": [
        "root",
        "message",
        "action"
      ],
      "name": "MuiSnackbarContent",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "message": "Styles applied to the message wrapper element.",
        "action": "Styles applied to the action wrapper element if `action` is provided."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/SnackbarContent/SnackbarContent.js",
    "inheritance": {
      "component": "Paper",
      "pathname": "/api/paper"
    }
  },
  "Step": {
    "description": "",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets the step as active. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "alternativeLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nSet internally by Stepper when it's supplied with the alternativeLabel property."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Should be `Step` sub-components such as `StepLabel`, `StepContent`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mark the step as completed. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "connector": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "@ignore\nPassed down from Stepper if alternativeLabel is also set."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mark the step as disabled, will also disable the button if\n`StepButton` is a child of `Step`. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "index": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "@ignore\nUsed internally for numbering."
      },
      "last": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "Step",
    "styles": {
      "classes": [
        "root",
        "horizontal",
        "vertical",
        "alternativeLabel",
        "completed"
      ],
      "name": "MuiStep",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
        "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
        "alternativeLabel": "Styles applied to the root element if `alternativeLabel={true}`.",
        "completed": "Pseudo-class applied to the root element if `completed={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Step/Step.js",
    "inheritance": null
  },
  "StepConnector": {
    "description": "",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "alternativeLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nSet internally by Step when it's supplied with the alternativeLabel property.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "index": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "@ignore"
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'horizontal'",
          "computed": false
        }
      }
    },
    "name": "StepConnector",
    "styles": {
      "classes": [
        "root",
        "horizontal",
        "vertical",
        "alternativeLabel",
        "active",
        "completed",
        "disabled",
        "line",
        "lineHorizontal",
        "lineVertical"
      ],
      "name": "MuiStepConnector",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
        "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
        "alternativeLabel": "Styles applied to the root element if `alternativeLabel={true}`.",
        "active": "Pseudo-class applied to the root element if `active={true}`.",
        "completed": "Pseudo-class applied to the root element if `completed={true}`.",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
        "line": "Styles applied to the line element.",
        "lineHorizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
        "lineVertical": "Styles applied to the root element if `orientation=\"vertical\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/StepConnector/StepConnector.js",
    "inheritance": null
  },
  "StepButton": {
    "description": "",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nPassed in via `Step` - passed through to `StepLabel`."
      },
      "alternativeLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nSet internally by Stepper when it's supplied with the alternativeLabel property."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Can be a `StepLabel` or a node to place inside `StepLabel` as children."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nSets completed styling. Is passed to StepLabel."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nDisables the button and sets disabled styling. Is passed to StepLabel."
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon displayed by the step label."
      },
      "last": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "optional": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The optional node to display."
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "StepButton",
    "styles": {
      "classes": [
        "root",
        "horizontal",
        "vertical",
        "touchRipple"
      ],
      "name": "MuiStepButton",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
        "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
        "touchRipple": "Styles applied to the `ButtonBase` touch-ripple."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/StepButton/StepButton.js",
    "inheritance": {
      "component": "ButtonBase",
      "pathname": "/api/button-base"
    }
  },
  "StepContent": {
    "description": "",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nExpands the content."
      },
      "alternativeLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nSet internally by Step when it's supplied with the alternativeLabel prop."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Step content."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "last": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "optional": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nSet internally by Step when it's supplied with the optional prop."
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore"
      },
      "TransitionComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the transition.",
        "defaultValue": {
          "value": "Collapse",
          "computed": true
        }
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'auto'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "Adjust the duration of the content expand transition.\nPassed as a prop to the transition component.\n\nSet to 'auto' to automatically calculate transition time based on height.",
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        }
      },
      "TransitionProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `Transition` element."
      }
    },
    "name": "StepContent",
    "styles": {
      "classes": [
        "root",
        "last",
        "transition"
      ],
      "name": "MuiStepContent",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "last": "Styles applied to the root element if `last={true}` (controlled by `Step`).",
        "transition": "Styles applied to the Transition component."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/StepContent/StepContent.js",
    "inheritance": null
  },
  "StepIcon": {
    "description": "",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this step is active.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mark the step as completed. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mark the step as failed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The icon displayed by the step label."
      }
    },
    "name": "StepIcon",
    "styles": {
      "classes": [
        "root",
        "text",
        "active",
        "completed",
        "error"
      ],
      "name": "MuiStepIcon",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "text": "Styles applied to the SVG text element.",
        "active": "Pseudo-class applied to the root element if `active={true}`.",
        "completed": "Pseudo-class applied to the root element if `completed={true}`.",
        "error": "Pseudo-class applied to the root element if `error={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/StepIcon/StepIcon.js",
    "inheritance": null
  },
  "StepLabel": {
    "description": "",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nSets the step as active. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "alternativeLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nSet internally by Stepper when it's supplied with the alternativeLabel prop.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "In most cases will simply be a string containing a title for the label."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\nMark the step as completed. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mark the step as disabled, will also disable the button if\n`StepLabelButton` is a child of `StepLabel`. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mark the step as failed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Override the default icon."
      },
      "last": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "optional": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The optional node to display."
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'horizontal'",
          "computed": false
        }
      },
      "StepIconComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component to render in place of the [`StepIcon`](/api/step-icon/)."
      },
      "StepIconProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`StepIcon`](/api/step-icon/) element."
      }
    },
    "name": "StepLabel",
    "styles": {
      "classes": [
        "root",
        "horizontal",
        "vertical",
        "label",
        "active",
        "completed",
        "error",
        "disabled",
        "iconContainer",
        "alternativeLabel",
        "labelContainer"
      ],
      "name": "MuiStepLabel",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "horizontal": "Styles applied to the root element if `orientation=\"horizontal\".",
        "vertical": "Styles applied to the root element if `orientation=\"vertical\".",
        "label": "Styles applied to the `Typography` component which wraps `children`.",
        "active": "Pseudo-class applied to the `Typography` component if `active={true}`.",
        "completed": "Pseudo-class applied to the `Typography` component if `completed={true}`.",
        "error": "Pseudo-class applied to the root element and `Typography` component if `error={true}`.",
        "disabled": "Pseudo-class applied to the root element and `Typography` component if `disabled={true}`.",
        "iconContainer": "Styles applied to the `icon` container element.",
        "alternativeLabel": "Pseudo-class applied to the root & icon container and `Typography` if `alternativeLabel={true}`.",
        "labelContainer": "Styles applied to the container element which wraps `Typography` and `optional`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/StepLabel/StepLabel.js",
    "inheritance": null
  },
  "Stepper": {
    "description": "",
    "methods": [],
    "props": {
      "activeStep": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set the active step (zero based index).",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "alternativeLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to 'true' and orientation is horizontal,\nthen the step label will be positioned under the icon.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Two or more `<Step />` components."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "connector": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "An element to be placed between each step.",
        "defaultValue": {
          "value": "<StepConnector />",
          "computed": false
        }
      },
      "nonLinear": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set the `Stepper` will not assist in controlling steps for linear flow.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stepper orientation (layout flow direction).",
        "defaultValue": {
          "value": "'horizontal'",
          "computed": false
        }
      }
    },
    "name": "Stepper",
    "styles": {
      "classes": [
        "root",
        "horizontal",
        "vertical",
        "alternativeLabel"
      ],
      "name": "MuiStepper",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "horizontal": "Styles applied to the root element if `orientation=\"horizontal\"`.",
        "vertical": "Styles applied to the root element if `orientation=\"vertical\"`.",
        "alternativeLabel": "Styles applied to the root element if `alternativeLabel={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Stepper/Stepper.js",
    "inheritance": {
      "component": "Paper",
      "pathname": "/api/paper"
    }
  },
  "SvgIcon": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Node passed into the SVG element."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'action'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'disabled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'svg'",
          "computed": false
        }
      },
      "fontSize": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "htmlColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Applies a color attribute to the SVG element."
      },
      "shapeRendering": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The shape-rendering attribute. The behavior of the different options is described on the\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\nIf you are having issues with blurry icons you should investigate this property."
      },
      "titleAccess": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provides a human-readable title for the element that contains it.\nhttps://www.w3.org/TR/SVG-access/#Equivalent"
      },
      "viewBox": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Allows you to redefine what the coordinates without units mean inside an SVG element.\nFor example, if the SVG element is 500 (width) by 200 (height),\nand you pass viewBox=\"0 0 50 20\",\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\nto bottom right (50,20) and each unit will be worth 10px.",
        "defaultValue": {
          "value": "'0 0 24 24'",
          "computed": false
        }
      }
    },
    "name": "SvgIcon",
    "styles": {
      "classes": [
        "root",
        "colorPrimary",
        "colorSecondary",
        "colorAction",
        "colorError",
        "colorDisabled",
        "fontSizeInherit",
        "fontSizeSmall",
        "fontSizeLarge"
      ],
      "name": "MuiSvgIcon",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
        "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
        "colorAction": "Styles applied to the root element if `color=\"action\"`.",
        "colorError": "Styles applied to the root element if `color=\"error\"`.",
        "colorDisabled": "Styles applied to the root element if `color=\"disabled\"`.",
        "fontSizeInherit": "Styles applied to the root element if `fontSize=\"inherit\"`.",
        "fontSizeSmall": "Styles applied to the root element if `fontSize=\"small\"`.",
        "fontSizeLarge": "Styles applied to the root element if `fontSize=\"large\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/SvgIcon/SvgIcon.js",
    "inheritance": null
  },
  "Switch": {
    "description": "",
    "methods": [],
    "props": {
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component is checked."
      },
      "checkedIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is checked."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'secondary'",
          "computed": false
        }
      },
      "defaultChecked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the switch will be disabled."
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled."
      },
      "edge": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If given, uses a negative margin to counteract the padding on one\nside (this is often helpful for aligning the left or right\nside of the icon with content above or below, without ruining the border\nsize and shape).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is unchecked."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "This prop can be used to pass a ref callback to the `input` element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the state is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.checked`.\n@param {boolean} checked The `checked` value of the switch"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The size of the switch.\n`small` is equivalent to the dense switch styling.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The input component prop `type`."
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the component."
      }
    },
    "name": "Switch",
    "styles": {
      "classes": [
        "root",
        "edgeStart",
        "edgeEnd",
        "switchBase",
        "colorPrimary",
        "colorSecondary",
        "sizeSmall",
        "checked",
        "disabled",
        "input",
        "thumb",
        "track"
      ],
      "name": "MuiSwitch",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "edgeStart": "Styles applied to the root element if `edge=\"start\"`.",
        "edgeEnd": "Styles applied to the root element if `edge=\"end\"`.",
        "switchBase": "Styles applied to the internal `SwitchBase` component's `root` class.",
        "colorPrimary": "Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`.",
        "colorSecondary": "Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`.",
        "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
        "checked": "Pseudo-class applied to the internal `SwitchBase` component's `checked` class.",
        "disabled": "Pseudo-class applied to the internal SwitchBase component's disabled class.",
        "input": "Styles applied to the internal SwitchBase component's input element.",
        "thumb": "Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop.",
        "track": "Styles applied to the track element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Switch/Switch.js",
    "inheritance": {
      "component": "IconButton",
      "pathname": "/api/icon-button"
    }
  },
  "Tab": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "custom",
          "raw": "unsupportedProp"
        },
        "required": false,
        "description": "This prop isn't supported.\nUse the `component` prop if you need to change the children structure."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the tab will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableFocusRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon element."
      },
      "indicator": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "@ignore\nFor server-side rendering consideration, we let the selected tab\nrender the indicator."
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The label element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "textColor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "You can provide your own value. Otherwise, we fallback to the child position index."
      },
      "wrapped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Tab labels appear in a single row.\nThey can use a second line if needed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "Tab",
    "styles": {
      "classes": [
        "root",
        "labelIcon",
        "textColorInherit",
        "textColorPrimary",
        "textColorSecondary",
        "selected",
        "disabled",
        "fullWidth",
        "wrapped",
        "wrapper"
      ],
      "name": "MuiTab",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "labelIcon": "Styles applied to the root element if both `icon` and `label` are provided.",
        "textColorInherit": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"inherit\"`.",
        "textColorPrimary": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"primary\"`.",
        "textColorSecondary": "Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor=\"secondary\"`.",
        "selected": "Pseudo-class applied to the root element if `selected={true}` (controlled by the Tabs component).",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}` (controlled by the Tabs component).",
        "fullWidth": "Styles applied to the root element if `fullWidth={true}` (controlled by the Tabs component).",
        "wrapped": "Styles applied to the root element if `wrapped={true}`.",
        "wrapper": "Styles applied to the `icon` and `label`'s wrapper element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Tab/Tab.js",
    "inheritance": {
      "component": "ButtonBase",
      "pathname": "/api/button-base"
    }
  },
  "Table": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the table, normally `TableHead` and `TableBody`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'table'",
          "computed": false
        }
      },
      "padding": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'checkbox'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Allows TableCells to inherit padding of the Table.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Allows TableCells to inherit size of the Table.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      }
    },
    "name": "Table",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiTable",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Table/Table.js",
    "inheritance": null
  },
  "TableBody": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component, normally `TableRow`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'tbody'",
          "computed": false
        }
      }
    },
    "name": "TableBody",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiTableBody",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/TableBody/TableBody.js",
    "inheritance": null
  },
  "TableCell": {
    "description": "",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'justify'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set the text-align on the table cell content.\n\nMonetary or generally number fields **should be right aligned** as that allows\nyou to add them up quickly in your head without having to worry about decimals.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The table cell contents."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component."
      },
      "padding": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'checkbox'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets the padding applied to the cell.\nBy default, the Table parent component set the value (`default`)."
      },
      "scope": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set scope attribute."
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the size of the cell.\nBy default, the Table parent component set the value (`medium`)."
      },
      "sortDirection": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'asc'",
              "computed": false
            },
            {
              "value": "'desc'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set aria-sort direction."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'head'",
              "computed": false
            },
            {
              "value": "'body'",
              "computed": false
            },
            {
              "value": "'footer'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the cell type.\nBy default, the TableHead, TableBody or TableFooter parent component set the value."
      }
    },
    "name": "TableCell",
    "styles": {
      "classes": [
        "root",
        "head",
        "body",
        "footer",
        "sizeSmall",
        "paddingCheckbox",
        "paddingNone",
        "alignLeft",
        "alignCenter",
        "alignRight",
        "alignJustify"
      ],
      "name": "MuiTableCell",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "head": "Styles applied to the root element if `variant=\"head\"` or `context.table.head`.",
        "body": "Styles applied to the root element if `variant=\"body\"` or `context.table.body`.",
        "footer": "Styles applied to the root element if `variant=\"footer\"` or `context.table.footer`.",
        "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
        "paddingCheckbox": "Styles applied to the root element if `padding=\"checkbox\"`.",
        "paddingNone": "Styles applied to the root element if `padding=\"none\"`.",
        "alignLeft": "Styles applied to the root element if `align=\"left\"`.",
        "alignCenter": "Styles applied to the root element if `align=\"center\"`.",
        "alignRight": "Styles applied to the root element if `align=\"right\"`.",
        "alignJustify": "Styles applied to the root element if `align=\"justify\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/TableCell/TableCell.js",
    "inheritance": null
  },
  "TableFooter": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component, normally `TableRow`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'tfoot'",
          "computed": false
        }
      }
    },
    "name": "TableFooter",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiTableFooter",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/TableFooter/TableFooter.js",
    "inheritance": null
  },
  "TableHead": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component, normally `TableRow`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'thead'",
          "computed": false
        }
      }
    },
    "name": "TableHead",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiTableHead",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/TableHead/TableHead.js",
    "inheritance": null
  },
  "TablePagination": {
    "description": "A `TableCell` based component for placing inside `TableFooter` for pagination.",
    "methods": [],
    "props": {
      "ActionsComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for displaying the actions.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "TablePaginationActions",
          "computed": true
        }
      },
      "backIconButtonProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the back arrow [`IconButton`](/api/icon-button/) component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "colSpan": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "TableCell",
          "computed": true
        }
      },
      "count": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The total number of rows."
      },
      "labelDisplayedRows": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Customize the displayed rows label.",
        "defaultValue": {
          "value": "({ from, to, count }) => `${from}-${to} of ${count}`",
          "computed": false
        }
      },
      "labelRowsPerPage": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Customize the rows per page label. Invoked with a `{ from, to, count, page }`\nobject.",
        "defaultValue": {
          "value": "'Rows per page:'",
          "computed": false
        }
      },
      "nextIconButtonProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the next arrow [`IconButton`](/api/icon-button/) element."
      },
      "onChangePage": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Callback fired when the page is changed.\n\n@param {object} event The event source of the callback\n@param {number} page The page selected"
      },
      "onChangeRowsPerPage": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the number of rows per page is changed.\n\n@param {object} event The event source of the callback"
      },
      "page": {
        "type": {
          "name": "custom",
          "raw": "chainPropTypes(PropTypes.number.isRequired, props => {\n  const { count, page, rowsPerPage } = props;\n  const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);\n  if (page < 0 || page > newLastPage) {\n    return new Error(\n      'Material-UI: the page prop of a TablePagination is out of range ' +\n        `(0 to ${newLastPage}, but page is ${page}).`,\n    );\n  }\n  return null;\n})"
        },
        "required": false,
        "description": "The zero-based index of the current page."
      },
      "rowsPerPage": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The number of rows per page."
      },
      "rowsPerPageOptions": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Customizes the options of the rows per page select field. If less than two options are\navailable, no select field will be displayed.",
        "defaultValue": {
          "value": "[10, 25, 50, 100]",
          "computed": false
        }
      },
      "SelectProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the rows per page [`Select`](/api/select/) element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    },
    "name": "TablePagination",
    "styles": {
      "classes": [
        "root",
        "toolbar",
        "spacer",
        "caption",
        "selectRoot",
        "select",
        "selectIcon",
        "input",
        "menuItem",
        "actions"
      ],
      "name": "MuiTablePagination",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "toolbar": "Styles applied to the Toolbar component.",
        "spacer": "Styles applied to the spacer element.",
        "caption": "Styles applied to the caption Typography components if `variant=\"caption\"`.",
        "selectRoot": "Styles applied to the Select component root element.",
        "select": "Styles applied to the Select component `select` class.",
        "selectIcon": "Styles applied to the Select component `icon` class.",
        "input": "Styles applied to the `InputBase` component.",
        "menuItem": "Styles applied to the MenuItem component.",
        "actions": "Styles applied to the internal `TablePaginationActions` component."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/TablePagination/TablePagination.js",
    "inheritance": {
      "component": "TableCell",
      "pathname": "/api/table-cell"
    }
  },
  "TableRow": {
    "description": "Will automatically set dynamic row height\nbased on the material table element parent (head, body, etc).",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Should be valid <tr> children such as `TableCell`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'tr'",
          "computed": false
        }
      },
      "hover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the table row will shade on hover.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the table row will have the selected shading.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "name": "TableRow",
    "styles": {
      "classes": [
        "root",
        "selected",
        "hover",
        "head",
        "footer"
      ],
      "name": "MuiTableRow",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "selected": "Pseudo-class applied to the root element if `selected={true}`.",
        "hover": "Pseudo-class applied to the root element if `hover={true}`.",
        "head": "Styles applied to the root element if table variant=\"head\".",
        "footer": "Styles applied to the root element if table variant=\"footer\"."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/TableRow/TableRow.js",
    "inheritance": null
  },
  "TableSortLabel": {
    "description": "A button based label for placing inside `TableCell` for column sorting.",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label will have the active styling (should be true for the sorted column).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Label contents, the arrow will be appended automatically."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'asc'",
              "computed": false
            },
            {
              "value": "'desc'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The current sort direction.",
        "defaultValue": {
          "value": "'desc'",
          "computed": false
        }
      },
      "hideSortIcon": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Hide sort icon when active is false.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "IconComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "Sort icon to use.",
        "defaultValue": {
          "value": "ArrowDownwardIcon",
          "computed": true
        }
      }
    },
    "name": "TableSortLabel",
    "styles": {
      "classes": [
        "root",
        "active",
        "icon",
        "iconDirectionDesc",
        "iconDirectionAsc"
      ],
      "name": "MuiTableSortLabel",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "active": "Pseudo-class applied to the root element if `active={true}`.",
        "icon": "Styles applied to the icon component.",
        "iconDirectionDesc": "Styles applied to the icon component if `direction=\"desc\"`.",
        "iconDirectionAsc": "Styles applied to the icon component if `direction=\"asc\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/TableSortLabel/TableSortLabel.js",
    "inheritance": {
      "component": "ButtonBase",
      "pathname": "/api/button-base"
    }
  },
  "TextField": {
    "description": "The `TextField` is a convenience wrapper for the most common cases (80%).\nIt cannot be all things to all people, otherwise the API would grow out of control.\n\n## Advanced Configuration\n\nIt's important to understand that the text field is a simple abstraction\non top of the following components:\n\n- [FormControl](/api/form-control/)\n- [InputLabel](/api/input-label/)\n- [FilledInput](/api/filled-input/)\n- [OutlinedInput](/api/outlined-input/)\n- [Input](/api/input/)\n- [FormHelperText](/api/form-helper-text/)\n\nIf you wish to alter the properties applied to the `input` element, you can do so as follows:\n\n```jsx\nconst inputProps = {\n  step: 300,\n};\n\nreturn <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n```\n\nFor advanced cases, please look at the source of TextField by clicking on the\n\"Edit this page\" button above. Consider either:\n\n- using the upper case props for passing values directly to the components\n- using the underlying components directly as shown in the demos",
    "methods": [],
    "props": {
      "autoComplete": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill)."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be focused during the first mount."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "@ignore"
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "defaultValue": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The default value of the `input` element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be disabled."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label will be displayed in an error state."
      },
      "FormHelperTextProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`FormHelperText`](/api/form-helper-text/) element."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will take up the full width of its container."
      },
      "helperText": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The helper text content."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers."
      },
      "InputLabelProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`InputLabel`](/api/input-label/) element."
      },
      "InputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the Input element.\nIt will be a [`FilledInput`](/api/filled-input/),\n[`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\ncomponent depending on the `variant` prop value."
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "This prop can be used to pass a ref callback to the `input` element."
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The label content."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'none'",
              "computed": false
            },
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'normal'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a textarea element will be rendered instead of an input."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `input` element."
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`."
      },
      "onFocus": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The short hint displayed in the input before the user enters a value."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label is displayed as required and the `input` element` will be required.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Number of rows to display when multiline option is set to true."
      },
      "rowsMax": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Maximum number of rows to display when multiline option is set to true."
      },
      "select": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "SelectProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Select`](/api/select/) element."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types)."
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the `input` element, required for a controlled component."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'standard'",
          "computed": false
        }
      }
    },
    "name": "TextField",
    "styles": {
      "classes": [
        "root"
      ],
      "name": "MuiTextField",
      "descriptions": {
        "root": "Styles applied to the root element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/TextField/TextField.js",
    "inheritance": {
      "component": "FormControl",
      "pathname": "/api/form-control"
    }
  },
  "TextareaAutosize": {
    "description": "",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Minimum umber of rows to display."
      },
      "rowsMax": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Maximum number of rows to display."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "name": "TextareaAutosize",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": true,
    "filename": "/packages/material-ui/src/TextareaAutosize/TextareaAutosize.js",
    "inheritance": null
  },
  "Toolbar": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "disableGutters": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, disables gutter padding.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'regular'",
              "computed": false
            },
            {
              "value": "'dense'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'regular'",
          "computed": false
        }
      }
    },
    "name": "Toolbar",
    "styles": {
      "classes": [
        "root",
        "gutters",
        "regular",
        "dense"
      ],
      "name": "MuiToolbar",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "gutters": "Styles applied to the root element if `disableGutters={false}`.",
        "regular": "Styles applied to the root element if `variant=\"regular\"`.",
        "dense": "Styles applied to the root element if `variant=\"dense\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Toolbar/Toolbar.js",
    "inheritance": null
  },
  "Typography": {
    "description": "",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'justify'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set the text-align on the component.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'initial'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'textPrimary'",
              "computed": false
            },
            {
              "value": "'textSecondary'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'initial'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.\nBy default, it maps the variant to a good default headline component."
      },
      "display": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'initial'",
              "computed": false
            },
            {
              "value": "'block'",
              "computed": false
            },
            {
              "value": "'inline'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls the display type",
        "defaultValue": {
          "value": "'initial'",
          "computed": false
        }
      },
      "gutterBottom": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the text will have a bottom margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "noWrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the text will not wrap, but instead will truncate with an ellipsis.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "paragraph": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the text will have a bottom margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'h1'",
              "computed": false
            },
            {
              "value": "'h2'",
              "computed": false
            },
            {
              "value": "'h3'",
              "computed": false
            },
            {
              "value": "'h4'",
              "computed": false
            },
            {
              "value": "'h5'",
              "computed": false
            },
            {
              "value": "'h6'",
              "computed": false
            },
            {
              "value": "'subtitle1'",
              "computed": false
            },
            {
              "value": "'subtitle2'",
              "computed": false
            },
            {
              "value": "'body1'",
              "computed": false
            },
            {
              "value": "'body2'",
              "computed": false
            },
            {
              "value": "'caption'",
              "computed": false
            },
            {
              "value": "'button'",
              "computed": false
            },
            {
              "value": "'overline'",
              "computed": false
            },
            {
              "value": "'srOnly'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Applies the theme typography styles.",
        "defaultValue": {
          "value": "'body1'",
          "computed": false
        }
      },
      "variantMapping": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "We are empirically mapping the variant prop to a range of different DOM element types.\nFor instance, subtitle1 to `<h6>`.\nIf you wish to change that mapping, you can provide your own.\nAlternatively, you can use the `component` prop.",
        "defaultValue": {
          "value": "{\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n}",
          "computed": false
        }
      }
    },
    "name": "Typography",
    "styles": {
      "classes": [
        "root",
        "body2",
        "body1",
        "caption",
        "button",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "subtitle1",
        "subtitle2",
        "overline",
        "srOnly",
        "alignLeft",
        "alignCenter",
        "alignRight",
        "alignJustify",
        "noWrap",
        "gutterBottom",
        "paragraph",
        "colorInherit",
        "colorPrimary",
        "colorSecondary",
        "colorTextPrimary",
        "colorTextSecondary",
        "colorError",
        "displayInline",
        "displayBlock"
      ],
      "name": "MuiTypography",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "body2": "Styles applied to the root element if `variant=\"body2\"`.",
        "body1": "Styles applied to the root element if `variant=\"body1\"`.",
        "caption": "Styles applied to the root element if `variant=\"caption\"`.",
        "button": "Styles applied to the root element if `variant=\"button\"`.",
        "h1": "Styles applied to the root element if `variant=\"h1\"`.",
        "h2": "Styles applied to the root element if `variant=\"h2\"`.",
        "h3": "Styles applied to the root element if `variant=\"h3\"`.",
        "h4": "Styles applied to the root element if `variant=\"h4\"`.",
        "h5": "Styles applied to the root element if `variant=\"h5\"`.",
        "h6": "Styles applied to the root element if `variant=\"h6\"`.",
        "subtitle1": "Styles applied to the root element if `variant=\"subtitle1\"`.",
        "subtitle2": "Styles applied to the root element if `variant=\"subtitle2\"`.",
        "overline": "Styles applied to the root element if `variant=\"overline\"`.",
        "srOnly": "Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers.",
        "alignLeft": "Styles applied to the root element if `align=\"left\"`.",
        "alignCenter": "Styles applied to the root element if `align=\"center\"`.",
        "alignRight": "Styles applied to the root element if `align=\"right\"`.",
        "alignJustify": "Styles applied to the root element if `align=\"justify\"`.",
        "noWrap": "Styles applied to the root element if `align=\"nowrap\"`.",
        "gutterBottom": "Styles applied to the root element if `gutterBottom={true}`.",
        "paragraph": "Styles applied to the root element if `paragraph={true}`.",
        "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
        "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
        "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
        "colorTextPrimary": "Styles applied to the root element if `color=\"textPrimary\"`.",
        "colorTextSecondary": "Styles applied to the root element if `color=\"textSecondary\"`.",
        "colorError": "Styles applied to the root element if `color=\"error\"`.",
        "displayInline": "Styles applied to the root element if `display=\"inline\"`.",
        "displayBlock": "Styles applied to the root element if `display=\"block\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Typography/Typography.js",
    "inheritance": null
  },
  "Zoom": {
    "description": "The Zoom transition can be used for the floating variant of the\n[Button](/components/buttons/#floating-action-buttons) component.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "A single child content element."
      },
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will transition in."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "timeout": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
          "computed": false
        }
      }
    },
    "name": "Zoom",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Zoom/Zoom.js",
    "inheritance": {
      "component": "Transition",
      "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
    }
  },
  "Button": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the button."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the button will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableFocusRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `focusVisibleClassName`."
      },
      "focusVisibleClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the button will take up the full width of its container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node."
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'text'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'contained'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      }
    },
    "name": "Button",
    "styles": {
      "classes": [
        "root",
        "label",
        "text",
        "textPrimary",
        "textSecondary",
        "outlined",
        "outlinedPrimary",
        "outlinedSecondary",
        "contained",
        "containedPrimary",
        "containedSecondary",
        "focusVisible",
        "disabled",
        "colorInherit",
        "sizeSmall",
        "sizeLarge",
        "fullWidth"
      ],
      "name": "MuiButton",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "label": "Styles applied to the span element that wraps the children.",
        "text": "Styles applied to the root element if `variant=\"text\"`.",
        "textPrimary": "Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`.",
        "textSecondary": "Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`.",
        "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
        "outlinedPrimary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.",
        "outlinedSecondary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.",
        "contained": "Styles applied to the root element if `variant=\"contained\"`.",
        "containedPrimary": "Styles applied to the root element if `variant=\"contained\"` and `color=\"primary\"`.",
        "containedSecondary": "Styles applied to the root element if `variant=\"contained\"` and `color=\"secondary\"`.",
        "focusVisible": "Pseudo-class applied to the ButtonBase root element if the button is keyboard focused.",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
        "colorInherit": "Styles applied to the root element if `color=\"inherit\"`.",
        "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
        "sizeLarge": "Styles applied to the root element if `size=\"large\"`.",
        "fullWidth": "Styles applied to the root element if `fullWidth={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Button/Button.js",
    "inheritance": {
      "component": "ButtonBase",
      "pathname": "/api/button-base"
    }
  },
  "Collapse": {
    "description": "The Collapse transition is used by the\n[Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content node to be collapsed."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "collapsedHeight": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The height of the container when collapsed.",
        "defaultValue": {
          "value": "'0px'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will transition in."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "timeout": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'auto'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n\nSet to 'auto' to automatically calculate transition time based on height.",
        "defaultValue": {
          "value": "duration.standard",
          "computed": true
        }
      }
    },
    "name": "Collapse",
    "styles": {
      "classes": [
        "container",
        "entered",
        "hidden",
        "wrapper",
        "wrapperInner"
      ],
      "name": "MuiCollapse",
      "descriptions": {
        "container": "Styles applied to the container element.",
        "entered": "Styles applied to the container element when the transition has entered.",
        "hidden": "Styles applied to the container element when the transition has exited and `collapsedHeight` != 0px.",
        "wrapper": "Styles applied to the outer wrapper element.",
        "wrapperInner": "Styles applied to the inner wrapper element."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Collapse/Collapse.js",
    "inheritance": {
      "component": "Transition",
      "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
    }
  },
  "Drawer": {
    "description": "The properties of the [Modal](/api/modal/) component are available\nwhen `variant=\"temporary\"` is set.",
    "methods": [],
    "props": {
      "anchor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Side from which the drawer will appear.",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "BackdropProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The contents of the drawer."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The elevation of the drawer.",
        "defaultValue": {
          "value": "16",
          "computed": false
        }
      },
      "ModalProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Modal`](/api/modal/) element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback"
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the drawer is open.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "PaperProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Paper`](/api/paper/) element."
      },
      "SlideProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Slide`](/api/slide/) element."
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'permanent'",
              "computed": false
            },
            {
              "value": "'persistent'",
              "computed": false
            },
            {
              "value": "'temporary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'temporary'",
          "computed": false
        }
      }
    },
    "name": "Drawer",
    "styles": {
      "classes": [
        "root",
        "docked",
        "paper",
        "paperAnchorLeft",
        "paperAnchorRight",
        "paperAnchorTop",
        "paperAnchorBottom",
        "paperAnchorDockedLeft",
        "paperAnchorDockedTop",
        "paperAnchorDockedRight",
        "paperAnchorDockedBottom",
        "modal"
      ],
      "name": "MuiDrawer",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "docked": "Styles applied to the root element if `variant=\"permanent or persistent\"`.",
        "paper": "Styles applied to the `Paper` component.",
        "paperAnchorLeft": "Styles applied to the `Paper` component if `anchor=\"left\"`.",
        "paperAnchorRight": "Styles applied to the `Paper` component if `anchor=\"right\"`.",
        "paperAnchorTop": "Styles applied to the `Paper` component if `anchor=\"top\"`.",
        "paperAnchorBottom": "Styles applied to the `Paper` component if `anchor=\"bottom\"`.",
        "paperAnchorDockedLeft": "Styles applied to the `Paper` component if `anchor=\"left\"` & `variant` is not \"temporary\".",
        "paperAnchorDockedTop": "Styles applied to the `Paper` component if `anchor=\"top\"` & `variant` is not \"temporary\".",
        "paperAnchorDockedRight": "Styles applied to the `Paper` component if `anchor=\"right\"` & `variant` is not \"temporary\".",
        "paperAnchorDockedBottom": "Styles applied to the `Paper` component if `anchor=\"bottom\"` & `variant` is not \"temporary\".",
        "modal": "Styles applied to the `Modal` component."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Drawer/Drawer.js",
    "inheritance": null
  },
  "FormControl": {
    "description": "Provides context such as filled/focused/error/required for form inputs.\nRelying on the context provides high flexibility and ensures that the state always stays\nconsistent across the children of the `FormControl`.\nThis context is used by the following components:\n\n - FormLabel\n - FormHelperText\n - Input\n - InputLabel\n\nYou can find one composition example below and more going to [the demos](/components/text-fields/#components).\n\n```jsx\n<FormControl>\n  <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n  <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n  <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n</FormControl>\n```\n\n⚠️Only one input can be used within a FormControl.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The contents of the form control."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label, input and helper text should be displayed in a disabled state.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label should be displayed in an error state.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will take up the full width of its container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'none'",
              "computed": false
            },
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'normal'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
        "defaultValue": {
          "value": "'none'",
          "computed": false
        }
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label will indicate that the input is required.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'standard'",
          "computed": false
        }
      }
    },
    "name": "FormControl",
    "styles": {
      "classes": [
        "root",
        "marginNormal",
        "marginDense",
        "fullWidth"
      ],
      "name": "MuiFormControl",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "marginNormal": "Styles applied to the root element if `margin=\"normal\"`.",
        "marginDense": "Styles applied to the root element if `margin=\"dense\"`.",
        "fullWidth": "Styles applied to the root element if `fullWidth={true}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/FormControl/FormControl.js",
    "inheritance": null
  },
  "Grow": {
    "description": "The Grow transition is used by the [Tooltip](/components/tooltips/) and\n[Popover](/components/popover/) components.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "A single child content element."
      },
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, show the component; triggers the enter or exit animation."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "timeout": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'auto'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n\nSet to 'auto' to automatically calculate transition time based on height.",
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        }
      }
    },
    "name": "Grow",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Grow/Grow.js",
    "inheritance": {
      "component": "Transition",
      "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
    }
  },
  "LinearProgress": {
    "description": "## ARIA\n\nIf the progress bar is describing the loading progress of a particular region of a page,\nyou should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\nattribute to `true` on that region until it has finished loading.",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The value of the progress indicator for the determinate and buffer variants.\nValue between 0 and 100."
      },
      "valueBuffer": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The value for the buffer variant.\nValue between 0 and 100."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'determinate'",
              "computed": false
            },
            {
              "value": "'indeterminate'",
              "computed": false
            },
            {
              "value": "'buffer'",
              "computed": false
            },
            {
              "value": "'query'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.\nUse indeterminate or query when there is no progress value.",
        "defaultValue": {
          "value": "'indeterminate'",
          "computed": false
        }
      }
    },
    "name": "LinearProgress",
    "styles": {
      "classes": [
        "root",
        "colorPrimary",
        "colorSecondary",
        "determinate",
        "indeterminate",
        "buffer",
        "query",
        "dashed",
        "dashedColorPrimary",
        "dashedColorSecondary",
        "bar",
        "barColorPrimary",
        "barColorSecondary",
        "bar1Indeterminate",
        "bar1Determinate",
        "bar1Buffer",
        "bar2Indeterminate",
        "bar2Buffer"
      ],
      "name": "MuiLinearProgress",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "colorPrimary": "Styles applied to the root & bar2 element if `color=\"primary\"`; bar2 if `variant-\"buffer\"`.",
        "colorSecondary": "Styles applied to the root & bar2 elements if `color=\"secondary\"`; bar2 if `variant=\"buffer\"`.",
        "determinate": "Styles applied to the root element if `variant=\"determinate\"`.",
        "indeterminate": "Styles applied to the root element if `variant=\"indeterminate\"`.",
        "buffer": "Styles applied to the root element if `variant=\"buffer\"`.",
        "query": "Styles applied to the root element if `variant=\"query\"`.",
        "dashed": "Styles applied to the additional bar element if `variant=\"buffer\"`.",
        "dashedColorPrimary": "Styles applied to the additional bar element if `variant=\"buffer\"` & `color=\"primary\"`.",
        "dashedColorSecondary": "Styles applied to the additional bar element if `variant=\"buffer\"` & `color=\"secondary\"`.",
        "bar": "Styles applied to the layered bar1 & bar2 elements.",
        "barColorPrimary": "Styles applied to the bar elements if `color=\"primary\"`; bar2 if `variant` not \"buffer\".",
        "barColorSecondary": "Styles applied to the bar elements if `color=\"secondary\"`; bar2 if `variant` not \"buffer\".",
        "bar1Indeterminate": "Styles applied to the bar1 element if `variant=\"indeterminate or query\"`.",
        "bar1Determinate": "Styles applied to the bar1 element if `variant=\"determinate\"`.",
        "bar1Buffer": "Styles applied to the bar1 element if `variant=\"buffer\"`.",
        "bar2Indeterminate": "Styles applied to the bar2 element if `variant=\"indeterminate or query\"`.",
        "bar2Buffer": "Styles applied to the bar2 element if `variant=\"buffer\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/LinearProgress/LinearProgress.js",
    "inheritance": null
  },
  "RadioGroup": {
    "description": "",
    "methods": [],
    "props": {
      "actions": {
        "type": {
          "name": "shape",
          "value": {
            "current": {
              "name": "object",
              "required": false
            }
          }
        },
        "required": false,
        "description": "@ignore"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "defaultValue": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The default `input` element value. Use when the component is not controlled."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The name used to reference the value of the control."
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when a radio button is selected.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`.\n@param {string} value The `value` of the selected radio button"
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Value of the selected radio button."
      }
    },
    "name": "RadioGroup",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": true,
    "filename": "/packages/material-ui/src/RadioGroup/RadioGroup.js",
    "inheritance": {
      "component": "FormGroup",
      "pathname": "/api/form-group"
    }
  },
  "Slider": {
    "description": "",
    "methods": [],
    "props": {
      "aria-label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The label of the slider."
      },
      "aria-labelledby": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the element containing a label for the slider."
      },
      "aria-valuetext": {
        "type": {
          "name": "custom",
          "raw": "chainPropTypes(PropTypes.string, props => {\n  const range = Array.isArray(props.value || props.defaultValue);\n\n  if (range && props['aria-valuetext']) {\n    return new Error(\n      'Material-UI: you need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range input.',\n    );\n  }\n\n  return null;\n})"
        },
        "required": false,
        "description": "A string value that provides a user-friendly name for the current value of the slider."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'span'",
          "computed": false
        }
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "number"
              }
            }
          ]
        },
        "required": false,
        "description": "The default element value. Use when the component is not controlled."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the slider will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "getAriaValueText": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n\n@param {number} value The thumb label's value to format\n@param {number} index The thumb label's index to format"
      },
      "marks": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "Marks indicate predetermined values to which the user can move the slider.\nIf `true` the marks will be spaced according the value of the `step` prop.\nIf an array, it should contain objects with `value` and an optional `label` keys.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum allowed value of the slider.\nShould not be equal to min.",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum allowed value of the slider.\nShould not be equal to max.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the hidden `input` element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function that is fired when the slider's value changed.\n\n@param {object} event The event source of the callback\n@param {any} value The new value"
      },
      "onChangeCommitted": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function that is fired when the `mouseup` is triggered.\n\n@param {object} event The event source of the callback\n@param {any} value The new value"
      },
      "onMouseDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The slider orientation.",
        "defaultValue": {
          "value": "'horizontal'",
          "computed": false
        }
      },
      "step": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The granularity with which the slider can step through values. (A \"discrete\" slider.)\nWhen step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "ThumbComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used to display the value label.",
        "defaultValue": {
          "value": "'span'",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "number"
              }
            }
          ]
        },
        "required": false,
        "description": "The value of the slider.\nFor ranged sliders, provide an array with two values."
      },
      "ValueLabelComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The value label componnet.",
        "defaultValue": {
          "value": "ValueLabel",
          "computed": true
        }
      },
      "valueLabelDisplay": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'on'",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "'off'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls when the value label is displayed:\n\n- `auto` the value label will display when the thumb is hovered or focused.\n- `on` will display persistently.\n- `off` will never display.",
        "defaultValue": {
          "value": "'off'",
          "computed": false
        }
      },
      "valueLabelFormat": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "The format function the value label's value.\n\nWhen a function is provided, it should have the following signature:\n\n- {number} value The value label's value to format\n- {number} index The value label's index to format",
        "defaultValue": {
          "value": "x => x",
          "computed": false
        }
      }
    },
    "name": "Slider",
    "styles": {
      "classes": [
        "root",
        "marked",
        "vertical",
        "disabled",
        "rail",
        "track",
        "thumb",
        "active",
        "focusVisible",
        "valueLabel",
        "mark",
        "markActive",
        "markLabel",
        "markLabelActive"
      ],
      "name": "MuiSlider",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "marked": "Styles applied to the root element if `marks` is provided with at least one label.",
        "vertical": "Pseudo-class applied to the root element if `orientation=\"vertical\"`.",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
        "rail": "Styles applied to the rail element.",
        "track": "Styles applied to the track element.",
        "thumb": "Styles applied to the thumb element.",
        "active": "Pseudo-class applied to the thumb element if it's active.",
        "focusVisible": "Pseudo-class applied to the thumb element if keyboard focused.",
        "valueLabel": "Styles applied to the thumb label element.",
        "mark": "Styles applied to the mark element.",
        "markActive": "Styles applied to the mark element if active (depending on the value).",
        "markLabel": "Styles applied to the mark label element.",
        "markLabelActive": "Styles applied to the mark label element if active (depending on the value)."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Slider/Slider.js",
    "inheritance": null
  },
  "Slide": {
    "description": "The Slide transition is used by the [Drawer](/components/drawers/) component.\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "custom",
          "raw": "elementAcceptingRef"
        },
        "required": false,
        "description": "A single child content element."
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'up'",
              "computed": false
            },
            {
              "value": "'down'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Direction the child node will enter from.",
        "defaultValue": {
          "value": "'down'",
          "computed": false
        }
      },
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, show the component; triggers the enter or exit animation."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "timeout": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
          "computed": false
        }
      }
    },
    "name": "Slide",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Slide/Slide.js",
    "inheritance": {
      "component": "Transition",
      "pathname": "https://reactcommunity.org/react-transition-group/transition#Transition-props"
    }
  },
  "Snackbar": {
    "description": "",
    "methods": [],
    "props": {
      "action": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The action to display."
      },
      "anchorOrigin": {
        "type": {
          "name": "shape",
          "value": {
            "horizontal": {
              "name": "enum",
              "value": [
                {
                  "value": "'left'",
                  "computed": false
                },
                {
                  "value": "'center'",
                  "computed": false
                },
                {
                  "value": "'right'",
                  "computed": false
                }
              ],
              "required": true
            },
            "vertical": {
              "name": "enum",
              "value": [
                {
                  "value": "'top'",
                  "computed": false
                },
                {
                  "value": "'bottom'",
                  "computed": false
                }
              ],
              "required": true
            }
          }
        },
        "required": false,
        "description": "The anchor of the `Snackbar`.",
        "defaultValue": {
          "value": "{ vertical: 'bottom', horizontal: 'center' }",
          "computed": false
        }
      },
      "autoHideDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds to wait before automatically calling the\n`onClose` function. `onClose` should then set the state of the `open`\nprop to hide the Snackbar. This behavior is disabled by default with\nthe `null` value."
      },
      "children": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "Replace the `SnackbarContent` component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "ClickAwayListenerProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `ClickAwayListener` element."
      },
      "ContentProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`SnackbarContent`](/api/snackbar-content/) element."
      },
      "disableWindowBlurListener": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `autoHideDuration` timer will expire even if the window is not focused.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "When displaying multiple consecutive Snackbars from a parent rendering a single\n<Snackbar/>, add the key prop to ensure independent treatment of each message.\ne.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\nfeatures such as autoHideDuration may be canceled."
      },
      "message": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The message to display."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\nTypically `onClose` is used to set state in the parent component,\nwhich is used to control the `Snackbar` `open` prop.\nThe `reason` parameter can optionally be used to control the response to `onClose`,\nfor example ignoring `clickaway`.\n\n@param {object} event The event source of the callback\n@param {string} reason Can be:`\"timeout\"` (`autoHideDuration` expired) or: `\"clickaway\"`"
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the transition is entering."
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the transition has entered."
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the transition is entering."
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the transition is exiting."
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the transition has exited."
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the transition is exiting."
      },
      "onMouseEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onMouseLeave": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, `Snackbar` is open."
      },
      "resumeHideDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds to wait before dismissing after user interaction.\nIf `autoHideDuration` prop isn't specified, it does nothing.\nIf `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\nwe default to `autoHideDuration / 2` ms."
      },
      "TransitionComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the transition.",
        "defaultValue": {
          "value": "Grow",
          "computed": true
        }
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen,\n}",
          "computed": false
        }
      },
      "TransitionProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `Transition` element."
      }
    },
    "name": "Snackbar",
    "styles": {
      "classes": [
        "root",
        "anchorOriginTopCenter",
        "anchorOriginBottomCenter",
        "anchorOriginTopRight",
        "anchorOriginBottomRight",
        "anchorOriginTopLeft",
        "anchorOriginBottomLeft"
      ],
      "name": "MuiSnackbar",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "anchorOriginTopCenter": "Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`.",
        "anchorOriginBottomCenter": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`.",
        "anchorOriginTopRight": "Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`.",
        "anchorOriginBottomRight": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`.",
        "anchorOriginTopLeft": "Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`.",
        "anchorOriginBottomLeft": "Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Snackbar/Snackbar.js",
    "inheritance": null
  },
  "Tooltip": {
    "description": "",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "custom",
          "raw": "elementAcceptingRef.isRequired"
        },
        "required": false,
        "description": "Tooltip reference element."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "disableFocusListener": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Do not respond to focus events.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableHoverListener": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Do not respond to hover events.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableTouchListener": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Do not respond to long press touch events.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "enterDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds to wait before showing the tooltip.\nThis prop won't impact the enter touch delay (`enterTouchDelay`).",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "enterTouchDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds a user must touch the element before showing the tooltip.",
        "defaultValue": {
          "value": "700",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The relationship between the tooltip and the wrapper component is not clear from the DOM.\nThis prop is used with aria-describedby to solve the accessibility issue.\nIf you don't provide this prop. It falls back to a randomly generated id."
      },
      "interactive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Makes a tooltip interactive, i.e. will not close when the user\nhovers over the tooltip before the `leaveDelay` is expired.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "leaveDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds to wait before hiding the tooltip.\nThis prop won't impact the leave touch delay (`leaveTouchDelay`).",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "leaveTouchDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds after the user stops touching an element before hiding the tooltip.",
        "defaultValue": {
          "value": "1500",
          "computed": false
        }
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the tooltip requests to be closed.\n\n@param {object} event The event source of the callback"
      },
      "onOpen": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the tooltip requests to be open.\n\n@param {object} event The event source of the callback"
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the tooltip is shown."
      },
      "placement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'bottom-end'",
              "computed": false
            },
            {
              "value": "'bottom-start'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'left-end'",
              "computed": false
            },
            {
              "value": "'left-start'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right-end'",
              "computed": false
            },
            {
              "value": "'right-start'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'top-end'",
              "computed": false
            },
            {
              "value": "'top-start'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Tooltip placement.",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      },
      "PopperProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Popper`](/api/popper/) element."
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Tooltip title. Zero-length titles string are never displayed."
      },
      "TransitionComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the transition.",
        "defaultValue": {
          "value": "Grow",
          "computed": true
        }
      },
      "TransitionProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `Transition` element."
      }
    },
    "name": "Tooltip",
    "styles": {
      "classes": [
        "popper",
        "popperInteractive",
        "tooltip",
        "touch",
        "tooltipPlacementLeft",
        "tooltipPlacementRight",
        "tooltipPlacementTop",
        "tooltipPlacementBottom"
      ],
      "name": "MuiTooltip",
      "descriptions": {
        "popper": "Styles applied to the Popper component.",
        "popperInteractive": "Styles applied to the Popper component if `interactive={true}`.",
        "tooltip": "Styles applied to the tooltip (label wrapper) element.",
        "touch": "Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch.",
        "tooltipPlacementLeft": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"left\".",
        "tooltipPlacementRight": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"right\".",
        "tooltipPlacementTop": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"top\".",
        "tooltipPlacementBottom": "Styles applied to the tooltip (label wrapper) element if `placement` contains \"bottom\"."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Tooltip/Tooltip.js",
    "inheritance": null
  },
  "ButtonBase": {
    "description": "`ButtonBase` contains as few styles as possible.\nIt aims to be a simple building block for creating a button.\nIt contains a load of style reset and some focus/ripple logic.",
    "methods": [],
    "props": {
      "action": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "A ref for imperative actions.\nIt currently only supports `focusVisible()` action."
      },
      "buttonRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that prop to pass a ref callback to the native button component.\n@deprecated Use `ref` instead"
      },
      "centerRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripples will be centered.\nThey won't start at the cursor interaction position.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "elementTypeAcceptingRef"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the base button will be disabled."
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `focusVisibleClassName`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableTouchRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the touch ripple effect will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "focusRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the base button will have a keyboard focus ripple.\n`disableRipple` must also be `false`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "focusVisibleClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This prop can help a person know which element has the keyboard focus.\nThe class name will be applied when the element gain the focus through a keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\nif needed."
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onDragLeave": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onFocus": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onFocusVisible": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too."
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onKeyUp": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onMouseDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onMouseLeave": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onMouseUp": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onTouchEnd": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onTouchMove": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onTouchStart": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "tabIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "TouchRippleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `TouchRipple` element."
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'submit'",
              "computed": false
            },
            {
              "value": "'reset'",
              "computed": false
            },
            {
              "value": "'button'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Used to control the button's purpose.\nThis prop passes the value to the `type` attribute of the native button component.",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      }
    },
    "name": "ButtonBase",
    "styles": {
      "classes": [
        "root",
        "disabled",
        "focusVisible"
      ],
      "name": "MuiButtonBase",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "disabled": "Pseudo-class applied to the root element if `disabled={true}`.",
        "focusVisible": "Pseudo-class applied to the root element if keyboard focused."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/ButtonBase/ButtonBase.js",
    "inheritance": null
  },
  "Chip": {
    "description": "Chips represent complex entities in small blocks, such as a contact.",
    "methods": [],
    "props": {
      "avatar": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "Avatar element."
      },
      "children": {
        "type": {
          "name": "custom",
          "raw": "unsupportedProp"
        },
        "required": false,
        "description": "This prop isn't supported.\nUse the `component` prop if you need to change the children structure."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "clickable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the chip will appear clickable, and will raise when pressed,\neven if the onClick prop is not defined.\nIf false, the chip will not be clickable, even if onClick prop is defined.\nThis can be used, for example,\nalong with the component prop to indicate an anchor Chip is clickable."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "deleteIcon": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "Override the default delete icon element. Shown only if `onDelete` is set."
      },
      "icon": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "Icon element."
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the label."
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onDelete": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function fired when the delete icon is clicked.\nIf set, the delete icon will be shown."
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onKeyUp": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The size of the chip.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      }
    },
    "name": "Chip",
    "styles": {
      "classes": [
        "root",
        "sizeSmall",
        "colorPrimary",
        "colorSecondary",
        "clickable",
        "clickableColorPrimary",
        "clickableColorSecondary",
        "deletable",
        "deletableColorPrimary",
        "deletableColorSecondary",
        "outlined",
        "outlinedPrimary",
        "outlinedSecondary",
        "avatar",
        "avatarSmall",
        "avatarColorPrimary",
        "avatarColorSecondary",
        "avatarChildren",
        "icon",
        "iconSmall",
        "iconColorPrimary",
        "iconColorSecondary",
        "label",
        "labelSmall",
        "deleteIcon",
        "deleteIconSmall",
        "deleteIconColorPrimary",
        "deleteIconColorSecondary",
        "deleteIconOutlinedColorPrimary",
        "deleteIconOutlinedColorSecondary"
      ],
      "name": "MuiChip",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "sizeSmall": "Styles applied to the root element if `size=\"small\"`.",
        "colorPrimary": "Styles applied to the root element if `color=\"primary\"`.",
        "colorSecondary": "Styles applied to the root element if `color=\"secondary\"`.",
        "clickable": "Styles applied to the root element if `onClick` is defined or `clickable={true}`.",
        "clickableColorPrimary": "Styles applied to the root element if `onClick` and `color=\"primary\"` is defined or `clickable={true}`.",
        "clickableColorSecondary": "Styles applied to the root element if `onClick` and `color=\"secondary\"` is defined or `clickable={true}`.",
        "deletable": "Styles applied to the root element if `onDelete` is defined.",
        "deletableColorPrimary": "Styles applied to the root element if `onDelete` and `color=\"primary\"` is defined.",
        "deletableColorSecondary": "Styles applied to the root element if `onDelete` and `color=\"secondary\"` is defined.",
        "outlined": "Styles applied to the root element if `variant=\"outlined\"`.",
        "outlinedPrimary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.",
        "outlinedSecondary": "Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.",
        "avatar": "Styles applied to the `avatar` element.",
        "avatarColorPrimary": "Styles applied to the `avatar` element if `color=\"primary\"`.",
        "avatarColorSecondary": "Styles applied to the `avatar` element if `color=\"secondary\"`.",
        "avatarChildren": "Styles applied to the `avatar` elements children.",
        "icon": "Styles applied to the `icon` element.",
        "iconColorPrimary": "Styles applied to the `icon` element if `color=\"primary\"`.",
        "iconColorSecondary": "Styles applied to the `icon` element if `color=\"secondary\"`.",
        "label": "Styles applied to the label `span` element`.",
        "deleteIcon": "Styles applied to the `deleteIcon` element.",
        "deleteIconColorPrimary": "Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"default\"`.",
        "deleteIconColorSecondary": "Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"default\"`.",
        "deleteIconOutlinedColorPrimary": "Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"outlined\"`.",
        "deleteIconOutlinedColorSecondary": "Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"outlined\"`."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Chip/Chip.js",
    "inheritance": null
  },
  "InputBase": {
    "description": "`InputBase` contains as few styles as possible.\nIt aims to be a simple building block for creating an input.\nIt contains a load of style reset and some state logic.",
    "methods": [],
    "props": {
      "aria-describedby": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "autoComplete": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This prop helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill)."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be focused during the first mount."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the wrapper element."
      },
      "defaultValue": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The default `input` element value. Use when the component is not controlled."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be disabled."
      },
      "endAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "End `InputAdornment` for this component."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will take up the full width of its container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the `input` element.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'input'",
          "computed": false
        }
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "This prop can be used to pass a ref callback to the `input` element."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a textarea element will be rendered.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `input` element."
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`."
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onFocus": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onKeyUp": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The short hint displayed in the input before the user enters a value."
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "It prevents the user from changing the value of the field\n(not from interacting with the field)."
      },
      "renderPrefix": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `input` element will be required."
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Number of rows to display when multiline option is set to true."
      },
      "rowsMax": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Maximum number of rows to display when multiline option is set to true."
      },
      "select": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should be `true` when the component hosts a select.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "startAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Start `InputAdornment` for this component."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the `input` element, required for a controlled component."
      }
    },
    "name": "InputBase",
    "styles": {
      "classes": [
        "root",
        "formControl",
        "focused",
        "disabled",
        "adornedStart",
        "adornedEnd",
        "error",
        "marginDense",
        "multiline",
        "fullWidth",
        "input",
        "inputMarginDense",
        "inputSelect",
        "inputMultiline",
        "inputTypeSearch",
        "inputAdornedStart",
        "inputAdornedEnd"
      ],
      "name": "MuiInputBase",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "formControl": "Styles applied to the root element if the component is a descendant of `FormControl`.",
        "focused": "Styles applied to the root element if the component is focused.",
        "disabled": "Styles applied to the root element if `disabled={true}`.",
        "adornedStart": "Styles applied to the root element if `startAdornment` is provided.",
        "adornedEnd": "Styles applied to the root element if `endAdornment` is provided.",
        "error": "Styles applied to the root element if `error={true}`.",
        "marginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
        "multiline": "Styles applied to the root element if `multiline={true}`.",
        "fullWidth": "Styles applied to the root element if `fullWidth={true}`.",
        "input": "Styles applied to the `input` element.",
        "inputMarginDense": "Styles applied to the `input` element if `margin=\"dense\"`.",
        "inputSelect": "Styles applied to the `input` element if `select={true}`.",
        "inputMultiline": "Styles applied to the `input` element if `multiline={true}`.",
        "inputTypeSearch": "Styles applied to the `input` element if `type=\"search\"`.",
        "inputAdornedStart": "Styles applied to the `input` element if `startAdornment` is provided.",
        "inputAdornedEnd": "Styles applied to the `input` element if `endAdornment` is provided."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/InputBase/InputBase.js",
    "inheritance": null
  },
  "Modal": {
    "description": "Modal is a lower-level construct that is leveraged by the following components:\n\n- [Dialog](/api/dialog/)\n- [Drawer](/api/drawer/)\n- [Menu](/api/menu/)\n- [Popover](/api/popover/)\n\nIf you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component\nrather than directly using Modal.\n\nThis component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).",
    "methods": [],
    "props": {
      "BackdropComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "A backdrop component. This prop enables custom backdrop rendering.",
        "defaultValue": {
          "value": "SimpleBackdrop",
          "computed": true
        }
      },
      "BackdropProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Backdrop`](/api/backdrop/) element."
      },
      "children": {
        "type": {
          "name": "custom",
          "raw": "elementAcceptingRef.isRequired"
        },
        "required": false,
        "description": "A single child content element."
      },
      "closeAfterTransition": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When set to true the Modal waits until a nested Transition is completed before closing.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "container": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "A node, component instance, or function that returns either.\nThe `container` will have the portal children appended to it."
      },
      "disableAutoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the modal will not automatically shift focus to itself when it opens, and\nreplace it to the last focused element when it closes.\nThis also works correctly with any modal children that have the `disableAutoFocus` prop.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableBackdropClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, clicking the backdrop will not fire any callback.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableEnforceFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the modal will not prevent focus from leaving the modal while open.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableEscapeKeyDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, hitting escape will not fire any callback.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disablePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the portal behavior.\nThe children stay within it's parent DOM hierarchy.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRestoreFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the modal will not restore focus to previously focused element once\nmodal is hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hideBackdrop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the backdrop is not rendered.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "keepMounted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Always keep the children in the DOM.\nThis prop can be useful in SEO situation or\nwhen you want to maximize the responsiveness of the Modal.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "manager": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore\n\nA modal manager used to track and manage the state of open Modals.",
        "defaultValue": {
          "value": "new ModalManager()",
          "computed": false
        }
      },
      "onBackdropClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the backdrop is clicked."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\nThe `reason` parameter can optionally be used to control the response to `onClose`.\n\n@param {object} event The event source of the callback\n@param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`"
      },
      "onEscapeKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the escape key is pressed,\n`disableEscapeKeyDown` is false and the modal is in focus."
      },
      "onRendered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired once the children has been mounted into the `container`.\nIt signals that the `open={true}` prop took effect.\n\nThis prop will be deprecated and removed in v5, the ref can be used instead."
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the modal is open."
      }
    },
    "name": "Modal",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Modal/Modal.js",
    "inheritance": null
  },
  "Tabs": {
    "description": "",
    "methods": [],
    "props": {
      "action": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component mounts.\nThis is useful when you want to trigger an action programmatically.\nIt currently only supports `updateIndicator()` action.\n\n@param {object} actions This object contains all possible actions\nthat can be triggered programmatically."
      },
      "centered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the tabs will be centered.\nThis property is intended for large views.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "indicatorColor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determines the color of the indicator.",
        "defaultValue": {
          "value": "'secondary'",
          "computed": false
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value changes.\n\n@param {object} event The event source of the callback\n@param {any} value We default to the index of the child (number)"
      },
      "ScrollButtonComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used to render the scroll buttons.",
        "defaultValue": {
          "value": "TabScrollButton",
          "computed": true
        }
      },
      "scrollButtons": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "'desktop'",
              "computed": false
            },
            {
              "value": "'on'",
              "computed": false
            },
            {
              "value": "'off'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determine behavior of scroll buttons when tabs are set to scroll:\n\n- `auto` will only present them when not all the items are visible.\n- `desktop` will only present them on medium and larger viewports.\n- `on` will always present them.\n- `off` will never present them.",
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        }
      },
      "TabIndicatorProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `TabIndicator` element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "textColor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determines the color of the `Tab`.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the currently selected `Tab`.\nIf you don't want any selected `Tab`, you can set this property to `false`."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'scrollable'",
              "computed": false
            },
            {
              "value": "'fullWidth'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determines additional display behavior of the tabs:\n\n - `scrollable` will invoke scrolling properties and allow for horizontally\n scrolling (or swiping) of the tab bar.\n -`fullWidth` will make the tabs grow to use all the available space,\n which should be used for small views, like on mobile.\n - `standard` will render the default state.",
        "defaultValue": {
          "value": "'standard'",
          "computed": false
        }
      }
    },
    "name": "Tabs",
    "styles": {
      "classes": [
        "root",
        "flexContainer",
        "centered",
        "scroller",
        "fixed",
        "scrollable",
        "scrollButtons",
        "scrollButtonsDesktop",
        "indicator"
      ],
      "name": "MuiTabs",
      "descriptions": {
        "root": "Styles applied to the root element.",
        "flexContainer": "Styles applied to the flex container element.",
        "centered": "Styles applied to the flex container element if `centered={true}` & `!variant=\"scrollable\"`.",
        "scroller": "Styles applied to the tablist element.",
        "fixed": "Styles applied to the tablist element if `!variant=\"scrollable\"`\b\b\b.",
        "scrollable": "Styles applied to the tablist element if `variant=\"scrollable\"`.",
        "scrollButtons": "Styles applied to the `ScrollButtonComponent` component.",
        "scrollButtonsDesktop": "Styles applied to the `ScrollButtonComponent` component if `scrollButtons=\"auto\"` or scrollButtons=\"desktop\"`.",
        "indicator": "Styles applied to the `TabIndicator` component."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Tabs/Tabs.js",
    "inheritance": null
  },
  "SwipeableDrawer": {
    "description": "",
    "methods": [],
    "props": {
      "anchor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "disableBackdropTransition": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the backdrop transition.\nThis can improve the FPS on low-end devices.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableDiscovery": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\nto promote accidental discovery of the swipe gesture.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableSwipeToOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\nnavigation actions. Swipe to open is disabled on iOS browsers by default.",
        "defaultValue": {
          "value": "typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)",
          "computed": false
        }
      },
      "hideBackdrop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "hysteresis": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Affects how far the drawer must be opened/closed to change his state.\nSpecified as percent (0-1) of the width of the drawer",
        "defaultValue": {
          "value": "0.55",
          "computed": false
        }
      },
      "minFlingVelocity": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Defines, from which (average) velocity on, the swipe is\ndefined as complete although hysteresis isn't reached.\nGood threshold is between 250 - 1000 px/s",
        "defaultValue": {
          "value": "400",
          "computed": false
        }
      },
      "ModalProps": {
        "type": {
          "name": "shape",
          "value": {
            "BackdropProps": {
              "name": "shape",
              "value": {
                "component": {
                  "name": "custom",
                  "raw": "elementTypeAcceptingRef",
                  "required": false
                }
              },
              "required": false
            }
          }
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback"
      },
      "onOpen": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Callback fired when the component requests to be opened.\n\n@param {object} event The event source of the callback"
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the drawer is open."
      },
      "PaperProps": {
        "type": {
          "name": "shape",
          "value": {
            "component": {
              "name": "custom",
              "raw": "elementTypeAcceptingRef",
              "required": false
            }
          }
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "SwipeAreaProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the swipe area element."
      },
      "swipeAreaWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the left most (or right most) area in pixels where the\ndrawer can be swiped open from.",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'permanent'",
              "computed": false
            },
            {
              "value": "'persistent'",
              "computed": false
            },
            {
              "value": "'temporary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'temporary'",
          "computed": false
        }
      }
    },
    "name": "SwipeableDrawer",
    "styles": {
      "classes": [],
      "name": null,
      "descriptions": {}
    },
    "spread": true,
    "filename": "/packages/material-ui/src/SwipeableDrawer/SwipeableDrawer.js",
    "inheritance": {
      "component": "Drawer",
      "pathname": "/api/drawer"
    }
  },
  "Popover": {
    "description": "",
    "methods": [],
    "props": {
      "action": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "This is callback prop. It's called by the component on mount.\nThis is useful when you want to trigger an action programmatically.\nIt currently only supports updatePosition() action.\n\n@param {object} actions This object contains all possible actions\nthat can be triggered programmatically."
      },
      "anchorEl": {
        "type": {
          "name": "custom",
          "raw": "chainPropTypes(PropTypes.oneOfType([PropTypes.object, PropTypes.func]), props => {\n  if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {\n    const resolvedAnchorEl = getAnchorEl(props.anchorEl);\n\n    if (resolvedAnchorEl instanceof Element) {\n      const box = resolvedAnchorEl.getBoundingClientRect();\n\n      if (\n        process.env.NODE_ENV !== 'test' &&\n        box.top === 0 &&\n        box.left === 0 &&\n        box.right === 0 &&\n        box.bottom === 0\n      ) {\n        return new Error(\n          [\n            'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n            'The node element should be visible.',\n          ].join('\\n'),\n        );\n      }\n    } else {\n      return new Error(\n        [\n          'Material-UI: the `anchorEl` prop provided to the component is invalid.',\n          `It should be an Element instance but it's \\`${resolvedAnchorEl}\\` instead.`,\n        ].join('\\n'),\n      );\n    }\n  }\n\n  return null;\n})"
        },
        "required": false,
        "description": "This is the DOM element, or a function that returns the DOM element,\nthat may be used to set the position of the popover."
      },
      "anchorOrigin": {
        "type": {
          "name": "shape",
          "value": {
            "horizontal": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'left'",
                      "computed": false
                    },
                    {
                      "value": "'center'",
                      "computed": false
                    },
                    {
                      "value": "'right'",
                      "computed": false
                    }
                  ]
                }
              ],
              "required": true
            },
            "vertical": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'top'",
                      "computed": false
                    },
                    {
                      "value": "'center'",
                      "computed": false
                    },
                    {
                      "value": "'bottom'",
                      "computed": false
                    }
                  ]
                }
              ],
              "required": true
            }
          }
        },
        "required": false,
        "description": "This is the point on the anchor where the popover's\n`anchorEl` will attach to. This is not used when the\nanchorReference is 'anchorPosition'.\n\nOptions:\nvertical: [top, center, bottom];\nhorizontal: [left, center, right].",
        "defaultValue": {
          "value": "{\n  vertical: 'top',\n  horizontal: 'left',\n}",
          "computed": false
        }
      },
      "anchorPosition": {
        "type": {
          "name": "shape",
          "value": {
            "left": {
              "name": "number",
              "required": true
            },
            "top": {
              "name": "number",
              "required": true
            }
          }
        },
        "required": false,
        "description": "This is the position that may be used\nto set the position of the popover.\nThe coordinates are relative to\nthe application's client area."
      },
      "anchorReference": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'anchorEl'",
              "computed": false
            },
            {
              "value": "'anchorPosition'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'anchorEl'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css) below for more details."
      },
      "container": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "A node, component instance, or function that returns either.\nThe `container` will passed to the Modal component.\nBy default, it uses the body of the anchorEl's top-level document object,\nso it's simply `document.body` most of the time."
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The elevation of the popover.",
        "defaultValue": {
          "value": "8",
          "computed": false
        }
      },
      "getContentAnchorEl": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "This function is called in order to retrieve the content anchor element.\nIt's the opposite of the `anchorEl` prop.\nThe content anchor element should be an element inside the popover.\nIt's used to correctly scroll and set the position of the popover.\nThe positioning strategy tries to make the content anchor element just above the\nanchor element."
      },
      "marginThreshold": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Specifies how close to the edge of the window the popover can appear.",
        "defaultValue": {
          "value": "16",
          "computed": false
        }
      },
      "ModalClasses": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "`classes` prop applied to the [`Modal`](/api/modal/) element."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback.\n@param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`"
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the component is entering."
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component has entered."
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component is entering."
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the component is exiting."
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component has exited."
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component is exiting."
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the popover is visible."
      },
      "PaperProps": {
        "type": {
          "name": "shape",
          "value": {
            "component": {
              "name": "custom",
              "raw": "elementTypeAcceptingRef",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Properties applied to the [`Paper`](/api/paper/) element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "transformOrigin": {
        "type": {
          "name": "shape",
          "value": {
            "horizontal": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'left'",
                      "computed": false
                    },
                    {
                      "value": "'center'",
                      "computed": false
                    },
                    {
                      "value": "'right'",
                      "computed": false
                    }
                  ]
                }
              ],
              "required": true
            },
            "vertical": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'top'",
                      "computed": false
                    },
                    {
                      "value": "'center'",
                      "computed": false
                    },
                    {
                      "value": "'bottom'",
                      "computed": false
                    }
                  ]
                }
              ],
              "required": true
            }
          }
        },
        "required": false,
        "description": "This is the point on the popover which\nwill attach to the anchor's origin.\n\nOptions:\nvertical: [top, center, bottom, x(px)];\nhorizontal: [left, center, right, x(px)].",
        "defaultValue": {
          "value": "{\n  vertical: 'top',\n  horizontal: 'left',\n}",
          "computed": false
        }
      },
      "TransitionComponent": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "The component used for the transition.",
        "defaultValue": {
          "value": "Grow",
          "computed": true
        }
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'auto'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "Set to 'auto' to automatically calculate transition time based on height.",
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        }
      },
      "TransitionProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `Transition` element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    },
    "name": "Popover",
    "styles": {
      "classes": [
        "paper"
      ],
      "name": "MuiPopover",
      "descriptions": {
        "paper": "Styles applied to the `Paper` component."
      }
    },
    "spread": true,
    "filename": "/packages/material-ui/src/Popover/Popover.js",
    "inheritance": {
      "component": "Modal",
      "pathname": "/api/modal"
    }
  }
}